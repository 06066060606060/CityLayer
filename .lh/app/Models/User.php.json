{
    "sourceFile": "app/Models/User.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 58,
            "patches": [
                {
                    "date": 1696847955291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1696847981131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+<?php\n+\n+namespace App\\Models;\n+\n+//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n+use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n+use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n+use Spatie\\Permission\\Traits\\HasRoles;\n+use Illuminate\\Notifications\\Notifiable;\n+use Laravel\\Sanctum\\HasApiTokens;\n+\n+\n+class User extends Authenticatable\n+{\n+\n+    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n+    use HasApiTokens, HasFactory, Notifiable;\n+    \n+    /**\n+     * The attributes that are mass assignable.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $fillable = [\n+        'name',\n+        'email',\n+        'password',\n+        'role',\n+        'score'\n+    ];\n+\n+    /**\n+     * The attributes that should be hidden for serialization.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $hidden = [\n+        'password',\n+        'remember_token',\n+    ];\n+\n+    /**\n+     * The attributes that should be cast.\n+     *\n+     * @var array<string, string>\n+     */\n+    protected $casts = [\n+        'email_verified_at' => 'datetime',\n+    ];\n+\n+    public function hasPermissionTo()\n+    {\n+        return 'notifications admin';\n+    }\n+    public function placeDetails()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id');\n+    }\n+\n+\n+}\n"
                },
                {
                    "date": 1696854648766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,67 +56,11 @@\n     {\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n \n-\n-}\n-<?php\n-\n-namespace App\\Models;\n-\n-//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n-use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n-use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n-use Spatie\\Permission\\Traits\\HasRoles;\n-use Illuminate\\Notifications\\Notifiable;\n-use Laravel\\Sanctum\\HasApiTokens;\n-\n-\n-class User extends Authenticatable\n-{\n-\n-    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n-    use HasApiTokens, HasFactory, Notifiable;\n-    \n-    /**\n-     * The attributes that are mass assignable.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $fillable = [\n-        'name',\n-        'email',\n-        'password',\n-        'role',\n-        'score'\n-    ];\n-\n-    /**\n-     * The attributes that should be hidden for serialization.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $hidden = [\n-        'password',\n-        'remember_token',\n-    ];\n-\n-    /**\n-     * The attributes that should be cast.\n-     *\n-     * @var array<string, string>\n-     */\n-    protected $casts = [\n-        'email_verified_at' => 'datetime',\n-    ];\n-\n-    public function hasPermissionTo()\n+    public function places()\n     {\n-        return 'notifications admin';\n+        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n     }\n-    public function placeDetails()\n-    {\n-        return $this->hasMany(PlaceDetail::class, 'user_id');\n-    }\n \n \n }\n"
                },
                {
                    "date": 1696854658220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,7 @@\n     {\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n \n-    public function places()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n-    }\n \n \n }\n"
                },
                {
                    "date": 1696854811708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,7 +56,12 @@\n     {\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n \n+    public function places()\n+{\n+    return $this->hasMany(PlaceDetail::class, 'user_id')->whereNotNull('place_id');\n+}\n \n \n+\n }\n"
                },
                {
                    "date": 1696854829298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,11 +57,16 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n \n     public function places()\n-{\n-    return $this->hasMany(PlaceDetail::class, 'user_id')->whereNotNull('place_id');\n-}\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n+    }\n+    public function observations()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('observation_id');\n+    }\n \n \n \n+\n }\n"
                },
                {
                    "date": 1697182943503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,14 @@\n     {\n         return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('observation_id');\n     }\n \n+    public function incrementScore()\n+    {\n+        $this->score = $this->score + 1;\n+        $this->save();\n+    }\n \n \n \n+\n }\n"
                },
                {
                    "date": 1697182969895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,11 +65,11 @@\n     {\n         return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('observation_id');\n     }\n \n-    public function incrementScore()\n+    public function incrementScore($number)\n     {\n-        $this->score = $this->score + 1;\n+        $this->score = $this->score + $number;\n         $this->save();\n     }\n \n \n"
                },
                {
                    "date": 1698523375608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+<?php\n+\n+namespace App\\Models;\n+\n+//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n+use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n+use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n+use Spatie\\Permission\\Traits\\HasRoles;\n+use Illuminate\\Notifications\\Notifiable;\n+use Laravel\\Sanctum\\HasApiTokens;\n+\n+\n+class User extends Authenticatable\n+{\n+\n+    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n+    use HasApiTokens, HasFactory, Notifiable;\n+    \n+    /**\n+     * The attributes that are mass assignable.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $fillable = [\n+        'name',\n+        'email',\n+        'password',\n+        'role',\n+        'score'\n+    ];\n+\n+    /**\n+     * The attributes that should be hidden for serialization.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $hidden = [\n+        'password',\n+        'remember_token',\n+    ];\n+\n+    /**\n+     * The attributes that should be cast.\n+     *\n+     * @var array<string, string>\n+     */\n+    protected $casts = [\n+        'email_verified_at' => 'datetime',\n+    ];\n+\n+    public function hasPermissionTo()\n+    {\n+        return 'notifications admin';\n+    }\n+    public function placeDetails()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id');\n+    }\n+\n+    public function places()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n+    }\n+    public function observations()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('observation_id');\n+    }\n+\n+    public function incrementScore($number)\n+    {\n+        $this->score = $this->score + $number;\n+        $this->save();\n+    }\n+\n+\n+    public function infosperso()\n+    {\n+        return $this->hasOne(Infosperso::class);\n+    }\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1698574884372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,85 +77,12 @@\n     {\n         return $this->hasOne(Infosperso::class);\n     }\n \n-\n-\n-}\n-<?php\n-\n-namespace App\\Models;\n-\n-//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n-use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n-use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n-use Spatie\\Permission\\Traits\\HasRoles;\n-use Illuminate\\Notifications\\Notifiable;\n-use Laravel\\Sanctum\\HasApiTokens;\n-\n-\n-class User extends Authenticatable\n-{\n-\n-    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n-    use HasApiTokens, HasFactory, Notifiable;\n-    \n-    /**\n-     * The attributes that are mass assignable.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $fillable = [\n-        'name',\n-        'email',\n-        'password',\n-        'role',\n-        'score'\n-    ];\n-\n-    /**\n-     * The attributes that should be hidden for serialization.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $hidden = [\n-        'password',\n-        'remember_token',\n-    ];\n-\n-    /**\n-     * The attributes that should be cast.\n-     *\n-     * @var array<string, string>\n-     */\n-    protected $casts = [\n-        'email_verified_at' => 'datetime',\n-    ];\n-\n-    public function hasPermissionTo()\n+    public function likedPlaces()\n     {\n-        return 'notifications admin';\n+        return $this->hasMany(PlaceLike::class, 'user_id', 'id');\n     }\n-    public function placeDetails()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id');\n-    }\n \n-    public function places()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n-    }\n-    public function observations()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('observation_id');\n-    }\n \n-    public function incrementScore($number)\n-    {\n-        $this->score = $this->score + $number;\n-        $this->save();\n-    }\n \n-\n-\n-\n }\n"
                },
                {
                    "date": 1698587322042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,12 @@\n     public function likedPlaces()\n     {\n         return $this->hasMany(PlaceLike::class, 'user_id', 'id');\n     }\n+    public function comments()\n+    {\n+        return $this->hasMany(PlaceComment::class, 'user_id', 'id');\n+    }\n \n \n \n }\n"
                },
                {
                    "date": 1698617723868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,16 +56,9 @@\n     {\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n \n-    public function places()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n-    }\n-    public function observations()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('observation_id');\n-    }\n+   \n \n     public function incrementScore($number)\n     {\n         $this->score = $this->score + $number;\n"
                },
                {
                    "date": 1698619096777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,16 @@\n     {\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n \n-   \n+    public function places()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n+    }\n+    public function observations()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('observation_id');\n+    }\n \n     public function incrementScore($number)\n     {\n         $this->score = $this->score + $number;\n"
                },
                {
                    "date": 1698619113114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+<?php\n+\n+namespace App\\Models;\n+\n+//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n+use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n+use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n+use Spatie\\Permission\\Traits\\HasRoles;\n+use Illuminate\\Notifications\\Notifiable;\n+use Laravel\\Sanctum\\HasApiTokens;\n+\n+\n+class User extends Authenticatable\n+{\n+\n+    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n+    use HasApiTokens, HasFactory, Notifiable;\n+    \n+    /**\n+     * The attributes that are mass assignable.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $fillable = [\n+        'name',\n+        'email',\n+        'password',\n+        'role',\n+        'score'\n+    ];\n+\n+    /**\n+     * The attributes that should be hidden for serialization.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $hidden = [\n+        'password',\n+        'remember_token',\n+    ];\n+\n+    /**\n+     * The attributes that should be cast.\n+     *\n+     * @var array<string, string>\n+     */\n+    protected $casts = [\n+        'email_verified_at' => 'datetime',\n+    ];\n+\n+    public function hasPermissionTo()\n+    {\n+        return 'notifications admin';\n+    }\n+    public function placeDetails()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id');\n+    }\n+\n+    public function places()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n+    }\n+    public function observations()\n+    {\n+        return $this->hasMany(Observation::class, 'user_id')->whereNotNull('observation_id');\n+    }\n+\n+    public function incrementScore($number)\n+    {\n+        $this->score = $this->score + $number;\n+        $this->save();\n+    }\n+\n+\n+    public function infosperso()\n+    {\n+        return $this->hasOne(Infosperso::class);\n+    }\n+\n+    public function likedPlaces()\n+    {\n+        return $this->hasMany(PlaceLike::class, 'user_id', 'id');\n+    }\n+    public function comments()\n+    {\n+        return $this->hasMany(PlaceComment::class, 'user_id', 'id');\n+    }\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1698619137229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,13 +58,13 @@\n     }\n \n     public function places()\n     {\n-        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n+        return $this->hasMany(Place::class, 'user_id');\n     }\n     public function observations()\n     {\n-        return $this->hasMany(Observation::class, 'user_id')->whereNotNull('observation_id');\n+        return $this->hasMany(Observation::class, 'user_id');\n     }\n \n     public function incrementScore($number)\n     {\n@@ -89,96 +89,4 @@\n \n \n \n }\n-<?php\n-\n-namespace App\\Models;\n-\n-//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n-use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n-use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n-use Spatie\\Permission\\Traits\\HasRoles;\n-use Illuminate\\Notifications\\Notifiable;\n-use Laravel\\Sanctum\\HasApiTokens;\n-\n-\n-class User extends Authenticatable\n-{\n-\n-    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n-    use HasApiTokens, HasFactory, Notifiable;\n-    \n-    /**\n-     * The attributes that are mass assignable.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $fillable = [\n-        'name',\n-        'email',\n-        'password',\n-        'role',\n-        'score'\n-    ];\n-\n-    /**\n-     * The attributes that should be hidden for serialization.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $hidden = [\n-        'password',\n-        'remember_token',\n-    ];\n-\n-    /**\n-     * The attributes that should be cast.\n-     *\n-     * @var array<string, string>\n-     */\n-    protected $casts = [\n-        'email_verified_at' => 'datetime',\n-    ];\n-\n-    public function hasPermissionTo()\n-    {\n-        return 'notifications admin';\n-    }\n-    public function placeDetails()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id');\n-    }\n-\n-    public function places()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('place_id');\n-    }\n-    public function observations()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id')->whereNotNull('observation_id');\n-    }\n-\n-    public function incrementScore($number)\n-    {\n-        $this->score = $this->score + $number;\n-        $this->save();\n-    }\n-\n-\n-    public function infosperso()\n-    {\n-        return $this->hasOne(Infosperso::class);\n-    }\n-\n-    public function likedPlaces()\n-    {\n-        return $this->hasMany(PlaceLike::class, 'user_id', 'id');\n-    }\n-    public function comments()\n-    {\n-        return $this->hasMany(PlaceComment::class, 'user_id', 'id');\n-    }\n-\n-\n-\n-}\n"
                },
                {
                    "date": 1698620271289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,17 @@\n     {\n         return $this->hasMany(Observation::class, 'user_id');\n     }\n \n+\n+    public function observationImages() {\n+        return $this->hasManyThrough(ObservationImage::class, PlaceDetail::class);\n+    }\n+    \n+    public function placeImages() {\n+        return $this->hasManyThrough(PlaceImage::class, PlaceDetail::class);\n+    }\n+\n     public function incrementScore($number)\n     {\n         $this->score = $this->score + $number;\n         $this->save();\n"
                },
                {
                    "date": 1698620291040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,13 +67,13 @@\n     }\n \n \n     public function observationImages() {\n-        return $this->hasManyThrough(ObservationImage::class, PlaceDetail::class);\n+        return $this->hasManyThrough(ObservationImage::class, PlaceDetails::class);\n     }\n     \n     public function placeImages() {\n-        return $this->hasManyThrough(PlaceImage::class, PlaceDetail::class);\n+        return $this->hasManyThrough(PlaceImage::class, PlaceDetails::class);\n     }\n \n     public function incrementScore($number)\n     {\n"
                },
                {
                    "date": 1698669682990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,12 @@\n     public function infosperso()\n     {\n         return $this->hasOne(Infosperso::class);\n     }\n+    public function preferences()\n+    {\n+        return $this->infosperso->preferences;\n+    }\n \n     public function likedPlaces()\n     {\n         return $this->hasMany(PlaceLike::class, 'user_id', 'id');\n"
                },
                {
                    "date": 1698669727785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,12 @@\n         return $this->hasOne(Infosperso::class);\n     }\n     public function preferences()\n     {\n-        return $this->infosperso->preferences;\n+        if ($this->infosperso) {\n+            return implode(', ', $this->infosperso->preferences);\n+        }\n+        return '';\n     }\n \n     public function likedPlaces()\n     {\n"
                },
                {
                    "date": 1698669932635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,12 +87,10 @@\n         return $this->hasOne(Infosperso::class);\n     }\n     public function preferences()\n     {\n-        if ($this->infosperso) {\n-            return implode(', ', $this->infosperso->preferences);\n-        }\n-        return '';\n+        \n+        return $this->infosperso;\n     }\n \n     public function likedPlaces()\n     {\n"
                },
                {
                    "date": 1698669943374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n     public function infosperso()\n     {\n         return $this->hasOne(Infosperso::class);\n     }\n-    public function preferences()\n+    public function getpreferences()\n     {\n         \n         return $this->infosperso;\n     }\n"
                },
                {
                    "date": 1698669959645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,12 @@\n         return $this->hasOne(Infosperso::class);\n     }\n     public function getpreferences()\n     {\n-        \n-        return $this->infosperso;\n+        if ($this->infosperso) {\n+            return implode(', ', $this->infosperso->preferences);\n+        }\n+        return '';\n     }\n \n     public function likedPlaces()\n     {\n"
                },
                {
                    "date": 1698669971190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getpreferences()\n     {\n         if ($this->infosperso) {\n-            return implode(', ', $this->infosperso->preferences);\n+            return $this->infosperso->preferences;\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670207107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n     public function infosperso()\n     {\n         return $this->hasOne(Infosperso::class);\n     }\n-    public function getpreferences()\n+    public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n             return $this->infosperso->preferences;\n         }\n"
                },
                {
                    "date": 1698670235553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return $this->infosperso->preferences;\n+            return implode(', ', $this->infosperso->preferences);\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670253000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return implode(', ', $this->infosperso->preferences);\n+            return implode(', ', json_decode($this->infosperso->total_likes, true));\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670260526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return implode(', ', json_decode($this->infosperso->total_likes, true));\n+            return implode(', ', json_decode($this->infosperso->total_likes));\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670270461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return implode(', ', json_decode($this->infosperso->total_likes));\n+            return implode(', ', json_decode($this->infosperso->preferences));\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670286622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return implode(', ', json_decode($this->infosperso->preferences));\n+            return json_decode($this->infosperso->preferences);\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670301746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return json_decode($this->infosperso->preferences);\n+            return ($this->infosperso->preferences);\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670357613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return ($this->infosperso->preferences);\n+            return implode(',', $this->infosperso->preferences);\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670377277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return implode(',', $this->infosperso->preferences);\n+            return $this->infosperso->preferences;\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670412014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return $this->infosperso->preferences;\n+            return json_decode($this->infosperso->preferences, true);;\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670433308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return json_decode($this->infosperso->preferences, true);;\n+            return implode(',',json_decode($this->infosperso->preferences, true));\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670482958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return implode(',',json_decode($this->infosperso->preferences, true));\n+            return implode(', ', $this->infosperso->preferences);\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670514783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,17 @@\n     }\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n-            return implode(', ', $this->infosperso->preferences);\n+            $preferencesArray = json_decode($this->infosperso->preferences, true);\n+\n+            if (is_array($preferencesArray)) {\n+                $preferencesString = implode(', ', $preferencesArray);\n+            } else {\n+                // Handle the case where the JSON couldn't be decoded\n+                $preferencesString = ''; // or provide an appropriate default value\n+            }\n+            return $preferencesString;\n         }\n         return '';\n     }\n \n"
                },
                {
                    "date": 1698670533694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,14 +89,12 @@\n     public function getTotalLikesAttribute()\n     {\n         if ($this->infosperso) {\n             $preferencesArray = json_decode($this->infosperso->preferences, true);\n-\n             if (is_array($preferencesArray)) {\n                 $preferencesString = implode(', ', $preferencesArray);\n             } else {\n-                // Handle the case where the JSON couldn't be decoded\n-                $preferencesString = ''; // or provide an appropriate default value\n+                $preferencesString = '';\n             }\n             return $preferencesString;\n         }\n         return '';\n"
                },
                {
                    "date": 1698670563473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n     public function infosperso()\n     {\n         return $this->hasOne(Infosperso::class);\n     }\n-    public function getTotalLikesAttribute()\n+    public function getpreferencesAttribute()\n     {\n         if ($this->infosperso) {\n             $preferencesArray = json_decode($this->infosperso->preferences, true);\n             if (is_array($preferencesArray)) {\n"
                },
                {
                    "date": 1698670643406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,12 @@\n     public function places()\n     {\n         return $this->hasMany(Place::class, 'user_id');\n     }\n+    public function getTotalPlacesAttribute()\n+    {\n+        return $this->places->count();\n+    }\n     public function observations()\n     {\n         return $this->hasMany(Observation::class, 'user_id');\n     }\n"
                },
                {
                    "date": 1698670719464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,17 +55,18 @@\n     public function placeDetails()\n     {\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n+    public function getTotalPlacesAttribute()\n+    {\n+        return $this->placeDetails->count();\n+    }\n \n     public function places()\n     {\n         return $this->hasMany(Place::class, 'user_id');\n     }\n-    public function getTotalPlacesAttribute()\n-    {\n-        return $this->places->count();\n-    }\n+   \n     public function observations()\n     {\n         return $this->hasMany(Observation::class, 'user_id');\n     }\n"
                },
                {
                    "date": 1698670726106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+<?php\n+\n+namespace App\\Models;\n+\n+//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n+use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n+use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n+use Spatie\\Permission\\Traits\\HasRoles;\n+use Illuminate\\Notifications\\Notifiable;\n+use Laravel\\Sanctum\\HasApiTokens;\n+\n+\n+class User extends Authenticatable\n+{\n+\n+    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n+    use HasApiTokens, HasFactory, Notifiable;\n+    \n+    /**\n+     * The attributes that are mass assignable.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $fillable = [\n+        'name',\n+        'email',\n+        'password',\n+        'role',\n+        'score'\n+    ];\n+\n+    /**\n+     * The attributes that should be hidden for serialization.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $hidden = [\n+        'password',\n+        'remember_token',\n+    ];\n+\n+    /**\n+     * The attributes that should be cast.\n+     *\n+     * @var array<string, string>\n+     */\n+    protected $casts = [\n+        'email_verified_at' => 'datetime',\n+    ];\n+\n+    public function hasPermissionTo()\n+    {\n+        return 'notifications admin';\n+    }\n+    public function placeDetails()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id');\n+    }\n+    public function getTotalPlacesDetailAttribute()\n+    {\n+        return $this->placeDetails->count();\n+    }\n+\n+    public function places()\n+    {\n+        return $this->hasMany(Place::class, 'user_id');\n+    }\n+   \n+    public function observations()\n+    {\n+        return $this->hasMany(Observation::class, 'user_id');\n+    }\n+\n+\n+    public function observationImages() {\n+        return $this->hasManyThrough(ObservationImage::class, PlaceDetails::class);\n+    }\n+    \n+    public function placeImages() {\n+        return $this->hasManyThrough(PlaceImage::class, PlaceDetails::class);\n+    }\n+\n+    public function incrementScore($number)\n+    {\n+        $this->score = $this->score + $number;\n+        $this->save();\n+    }\n+\n+\n+    public function infosperso()\n+    {\n+        return $this->hasOne(Infosperso::class);\n+    }\n+    public function getpreferencesAttribute()\n+    {\n+        if ($this->infosperso) {\n+            $preferencesArray = json_decode($this->infosperso->preferences, true);\n+            if (is_array($preferencesArray)) {\n+                $preferencesString = implode(', ', $preferencesArray);\n+            } else {\n+                $preferencesString = '';\n+            }\n+            return $preferencesString;\n+        }\n+        return '';\n+    }\n+\n+    public function likedPlaces()\n+    {\n+        return $this->hasMany(PlaceLike::class, 'user_id', 'id');\n+    }\n+    public function comments()\n+    {\n+        return $this->hasMany(PlaceComment::class, 'user_id', 'id');\n+    }\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1698670820224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesDetailAttribute()\n     {\n-        return $this->placeDetails->count();\n+        return $this->placeDetails->placeDetail->count();\n     }\n \n     public function places()\n     {\n@@ -116,123 +116,4 @@\n \n \n \n }\n-<?php\n-\n-namespace App\\Models;\n-\n-//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n-use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n-use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n-use Spatie\\Permission\\Traits\\HasRoles;\n-use Illuminate\\Notifications\\Notifiable;\n-use Laravel\\Sanctum\\HasApiTokens;\n-\n-\n-class User extends Authenticatable\n-{\n-\n-    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n-    use HasApiTokens, HasFactory, Notifiable;\n-    \n-    /**\n-     * The attributes that are mass assignable.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $fillable = [\n-        'name',\n-        'email',\n-        'password',\n-        'role',\n-        'score'\n-    ];\n-\n-    /**\n-     * The attributes that should be hidden for serialization.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $hidden = [\n-        'password',\n-        'remember_token',\n-    ];\n-\n-    /**\n-     * The attributes that should be cast.\n-     *\n-     * @var array<string, string>\n-     */\n-    protected $casts = [\n-        'email_verified_at' => 'datetime',\n-    ];\n-\n-    public function hasPermissionTo()\n-    {\n-        return 'notifications admin';\n-    }\n-    public function placeDetails()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id');\n-    }\n-    public function getTotalPlacesAttribute()\n-    {\n-        return $this->placeDetails->count();\n-    }\n-\n-    public function places()\n-    {\n-        return $this->hasMany(Place::class, 'user_id');\n-    }\n-   \n-    public function observations()\n-    {\n-        return $this->hasMany(Observation::class, 'user_id');\n-    }\n-\n-\n-    public function observationImages() {\n-        return $this->hasManyThrough(ObservationImage::class, PlaceDetails::class);\n-    }\n-    \n-    public function placeImages() {\n-        return $this->hasManyThrough(PlaceImage::class, PlaceDetails::class);\n-    }\n-\n-    public function incrementScore($number)\n-    {\n-        $this->score = $this->score + $number;\n-        $this->save();\n-    }\n-\n-\n-    public function infosperso()\n-    {\n-        return $this->hasOne(Infosperso::class);\n-    }\n-    public function getpreferencesAttribute()\n-    {\n-        if ($this->infosperso) {\n-            $preferencesArray = json_decode($this->infosperso->preferences, true);\n-            if (is_array($preferencesArray)) {\n-                $preferencesString = implode(', ', $preferencesArray);\n-            } else {\n-                $preferencesString = '';\n-            }\n-            return $preferencesString;\n-        }\n-        return '';\n-    }\n-\n-    public function likedPlaces()\n-    {\n-        return $this->hasMany(PlaceLike::class, 'user_id', 'id');\n-    }\n-    public function comments()\n-    {\n-        return $this->hasMany(PlaceComment::class, 'user_id', 'id');\n-    }\n-\n-\n-\n-}\n"
                },
                {
                    "date": 1698670836991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     public function placeDetails()\n     {\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n-    public function getTotalPlacesDetailAttribute()\n+    public function getTotalPlacesMappedAttribute()\n     {\n         return $this->placeDetails->placeDetail->count();\n     }\n \n"
                },
                {
                    "date": 1698671062102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,13 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        return $this->placeDetails->placeDetail->count();\n+        $totalPlaceDetailPlace = 0;\n+        foreach ($this->placeDetails as $placeDetail) {\n+            $totalPlaceDetailPlace += $placeDetail->placeDetail()->count();\n+        }\n+        return $totalPlaceDetailPlace;\n     }\n \n     public function places()\n     {\n"
                },
                {
                    "date": 1698671102944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,13 +57,10 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        $totalPlaceDetailPlace = 0;\n-        foreach ($this->placeDetails as $placeDetail) {\n-            $totalPlaceDetailPlace += $placeDetail->placeDetail()->count();\n-        }\n-        return $totalPlaceDetailPlace;\n+        return $this->placeDetails->withCount('placeDetail')->get()->sum('placeDetail_count');\n+\n     }\n \n     public function places()\n     {\n"
                },
                {
                    "date": 1698671133805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,9 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        return $this->placeDetails->withCount('placeDetail')->get()->sum('placeDetail_count');\n-\n+        return $this->placeDetails()->withCount('placeDetail')->get()->sum('placeDetail_count');\n     }\n \n     public function places()\n     {\n"
                },
                {
                    "date": 1698671164105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        return $this->placeDetails()->withCount('placeDetail')->get()->sum('placeDetail_count');\n+        return $this->placeDetails->withCount('placeDetail')->get()->sum('placeDetail_count');\n     }\n \n     public function places()\n     {\n"
                },
                {
                    "date": 1698671180093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        return $this->placeDetails->withCount('placeDetail')->get()->sum('placeDetail_count');\n+        return $this->placeDetails->withCount('placeDetail')->get()->sum();\n     }\n \n     public function places()\n     {\n"
                },
                {
                    "date": 1698671191301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        return $this->placeDetails->withCount('placeDetail')->get()->sum();\n+        return $this->placeDetails->withCount('placeDetail')->get()->sum('id');\n     }\n \n     public function places()\n     {\n"
                },
                {
                    "date": 1698671246537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        return $this->placeDetails->withCount('placeDetail')->get()->sum('id');\n+        return $this->placeDetails()->withCount('placeDetail')->get()->sum('placeDetail_count');\n     }\n \n     public function places()\n     {\n"
                },
                {
                    "date": 1698671269719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        return $this->placeDetails()->withCount('placeDetail')->get()->sum('placeDetail_count');\n+        return $this->placeDetails()->withCount('placeDetail')->get()->count('placeDetail_count');\n     }\n \n     public function places()\n     {\n"
                },
                {
                    "date": 1698671362047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,12 @@\n     public function getTotalPlacesMappedAttribute()\n     {\n         return $this->placeDetails()->withCount('placeDetail')->get()->count('placeDetail_count');\n     }\n+    public function getTotalObservationMappedAttribute()\n+    {\n+        return $this->placeDetails()->withCount('placeDetail')->get()->count('placeDetail_count');\n+    }\n \n     public function places()\n     {\n         return $this->hasMany(Place::class, 'user_id');\n"
                },
                {
                    "date": 1698671369304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n         return $this->placeDetails()->withCount('placeDetail')->get()->count('placeDetail_count');\n     }\n     public function getTotalObservationMappedAttribute()\n     {\n-        return $this->placeDetails()->withCount('placeDetail')->get()->count('placeDetail_count');\n+        return $this->placeDetails()->withCount('observationsDetail')->get()->count('observationsDetail_count');\n     }\n \n     public function places()\n     {\n"
                },
                {
                    "date": 1698671595129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        return $this->placeDetails()->withCount('placeDetail')->get()->count('placeDetail_count');\n+        \n     }\n     public function getTotalObservationMappedAttribute()\n     {\n         return $this->placeDetails()->withCount('observationsDetail')->get()->count('observationsDetail_count');\n"
                },
                {
                    "date": 1698671603125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,13 @@\n         return $this->hasMany(PlaceDetails::class, 'user_id');\n     }\n     public function getTotalPlacesMappedAttribute()\n     {\n-        \n+        $totalPlaceDetailPlace = 0;\n+        foreach ($this->placeDetails as $placeDetail) {\n+            $totalPlaceDetailPlace += $placeDetail->placeDetail()->count();\n+        }\n+        return $totalPlaceDetailPlace;\n     }\n     public function getTotalObservationMappedAttribute()\n     {\n         return $this->placeDetails()->withCount('observationsDetail')->get()->count('observationsDetail_count');\n"
                },
                {
                    "date": 1698671635863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+<?php\n+\n+namespace App\\Models;\n+\n+//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n+use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n+use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n+use Spatie\\Permission\\Traits\\HasRoles;\n+use Illuminate\\Notifications\\Notifiable;\n+use Laravel\\Sanctum\\HasApiTokens;\n+\n+\n+class User extends Authenticatable\n+{\n+\n+    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n+    use HasApiTokens, HasFactory, Notifiable;\n+    \n+    /**\n+     * The attributes that are mass assignable.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $fillable = [\n+        'name',\n+        'email',\n+        'password',\n+        'role',\n+        'score'\n+    ];\n+\n+    /**\n+     * The attributes that should be hidden for serialization.\n+     *\n+     * @var array<int, string>\n+     */\n+    protected $hidden = [\n+        'password',\n+        'remember_token',\n+    ];\n+\n+    /**\n+     * The attributes that should be cast.\n+     *\n+     * @var array<string, string>\n+     */\n+    protected $casts = [\n+        'email_verified_at' => 'datetime',\n+    ];\n+\n+    public function hasPermissionTo()\n+    {\n+        return 'notifications admin';\n+    }\n+    public function placeDetails()\n+    {\n+        return $this->hasMany(PlaceDetails::class, 'user_id');\n+    }\n+    public function getTotalPlacesMappedAttribute()\n+    {\n+        $total = 0;\n+        foreach ($this->placeDetails as $placeDetail) {\n+            $total += $placeDetail->placeDetail()->count();\n+        }\n+        return $total;\n+    }\n+    public function getTotalObservationMappedAttribute()\n+    {\n+        $total = 0;\n+        foreach ($this->placeDetails as $placeDetail) {\n+            $total += $placeDetail->observationsDetail()->count();\n+        }\n+        return $total;\n+\n+    }\n+\n+    public function places()\n+    {\n+        return $this->hasMany(Place::class, 'user_id');\n+    }\n+   \n+    public function observations()\n+    {\n+        return $this->hasMany(Observation::class, 'user_id');\n+    }\n+\n+\n+    public function observationImages() {\n+        return $this->hasManyThrough(ObservationImage::class, PlaceDetails::class);\n+    }\n+    \n+    public function placeImages() {\n+        return $this->hasManyThrough(PlaceImage::class, PlaceDetails::class);\n+    }\n+\n+    public function incrementScore($number)\n+    {\n+        $this->score = $this->score + $number;\n+        $this->save();\n+    }\n+\n+\n+    public function infosperso()\n+    {\n+        return $this->hasOne(Infosperso::class);\n+    }\n+    public function getpreferencesAttribute()\n+    {\n+        if ($this->infosperso) {\n+            $preferencesArray = json_decode($this->infosperso->preferences, true);\n+            if (is_array($preferencesArray)) {\n+                $preferencesString = implode(', ', $preferencesArray);\n+            } else {\n+                $preferencesString = '';\n+            }\n+            return $preferencesString;\n+        }\n+        return '';\n+    }\n+\n+    public function likedPlaces()\n+    {\n+        return $this->hasMany(PlaceLike::class, 'user_id', 'id');\n+    }\n+    public function comments()\n+    {\n+        return $this->hasMany(PlaceComment::class, 'user_id', 'id');\n+    }\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1698671731262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,13 +65,11 @@\n         return $total;\n     }\n     public function getTotalObservationMappedAttribute()\n     {\n-        $total = 0;\n-        foreach ($this->placeDetails as $placeDetail) {\n-            $total += $placeDetail->observationsDetail()->count();\n-        }\n-        return $total;\n+        return $this->placeDetails()->withCount(['observationsDetail as unique_observations_detail_count' => function ($query) {\n+            $query->select(DB::raw('count(distinct place_detail_id, observation_id)'));\n+        }])->get()->sum('unique_observations_detail_count');\n \n     }\n \n     public function places()\n@@ -129,131 +127,4 @@\n \n \n \n }\n-<?php\n-\n-namespace App\\Models;\n-\n-//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\n-use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n-use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n-use Spatie\\Permission\\Traits\\HasRoles;\n-use Illuminate\\Notifications\\Notifiable;\n-use Laravel\\Sanctum\\HasApiTokens;\n-\n-\n-class User extends Authenticatable\n-{\n-\n-    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n-    use HasApiTokens, HasFactory, Notifiable;\n-    \n-    /**\n-     * The attributes that are mass assignable.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $fillable = [\n-        'name',\n-        'email',\n-        'password',\n-        'role',\n-        'score'\n-    ];\n-\n-    /**\n-     * The attributes that should be hidden for serialization.\n-     *\n-     * @var array<int, string>\n-     */\n-    protected $hidden = [\n-        'password',\n-        'remember_token',\n-    ];\n-\n-    /**\n-     * The attributes that should be cast.\n-     *\n-     * @var array<string, string>\n-     */\n-    protected $casts = [\n-        'email_verified_at' => 'datetime',\n-    ];\n-\n-    public function hasPermissionTo()\n-    {\n-        return 'notifications admin';\n-    }\n-    public function placeDetails()\n-    {\n-        return $this->hasMany(PlaceDetails::class, 'user_id');\n-    }\n-    public function getTotalPlacesMappedAttribute()\n-    {\n-        $totalPlaceDetailPlace = 0;\n-        foreach ($this->placeDetails as $placeDetail) {\n-            $totalPlaceDetailPlace += $placeDetail->placeDetail()->count();\n-        }\n-        return $totalPlaceDetailPlace;\n-    }\n-    public function getTotalObservationMappedAttribute()\n-    {\n-        return $this->placeDetails()->withCount('observationsDetail')->get()->count('observationsDetail_count');\n-    }\n-\n-    public function places()\n-    {\n-        return $this->hasMany(Place::class, 'user_id');\n-    }\n-   \n-    public function observations()\n-    {\n-        return $this->hasMany(Observation::class, 'user_id');\n-    }\n-\n-\n-    public function observationImages() {\n-        return $this->hasManyThrough(ObservationImage::class, PlaceDetails::class);\n-    }\n-    \n-    public function placeImages() {\n-        return $this->hasManyThrough(PlaceImage::class, PlaceDetails::class);\n-    }\n-\n-    public function incrementScore($number)\n-    {\n-        $this->score = $this->score + $number;\n-        $this->save();\n-    }\n-\n-\n-    public function infosperso()\n-    {\n-        return $this->hasOne(Infosperso::class);\n-    }\n-    public function getpreferencesAttribute()\n-    {\n-        if ($this->infosperso) {\n-            $preferencesArray = json_decode($this->infosperso->preferences, true);\n-            if (is_array($preferencesArray)) {\n-                $preferencesString = implode(', ', $preferencesArray);\n-            } else {\n-                $preferencesString = '';\n-            }\n-            return $preferencesString;\n-        }\n-        return '';\n-    }\n-\n-    public function likedPlaces()\n-    {\n-        return $this->hasMany(PlaceLike::class, 'user_id', 'id');\n-    }\n-    public function comments()\n-    {\n-        return $this->hasMany(PlaceComment::class, 'user_id', 'id');\n-    }\n-\n-\n-\n-}\n"
                },
                {
                    "date": 1698671741375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,11 +65,13 @@\n         return $total;\n     }\n     public function getTotalObservationMappedAttribute()\n     {\n-        return $this->placeDetails()->withCount(['observationsDetail as unique_observations_detail_count' => function ($query) {\n-            $query->select(DB::raw('count(distinct place_detail_id, observation_id)'));\n-        }])->get()->sum('unique_observations_detail_count');\n+        $total = 0;\n+        foreach ($this->placeDetails as $placeDetail) {\n+            $total += $placeDetail->observationsDetail()->count();\n+        }\n+        return $total;\n \n     }\n \n     public function places()\n"
                },
                {
                    "date": 1698671825027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,14 +65,17 @@\n         return $total;\n     }\n     public function getTotalObservationMappedAttribute()\n     {\n-        $total = 0;\n-        foreach ($this->placeDetails as $placeDetail) {\n-            $total += $placeDetail->observationsDetail()->count();\n-        }\n-        return $total;\n+       \n+        $allobservation = $this->placeDetails->flatMap(function ($placeDetail) {\n+            return $placeDetail->observationsDetail->map(function ($observation) {\n+                return $observation->only(['place_detail_id', 'observation_id']);\n+            });\n+        })->unique();\n+        return $allobservation->count();\n \n+\n     }\n \n     public function places()\n     {\n"
                }
            ],
            "date": 1696847955290,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Models;\n\n//  use Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Sanctum\\HasApiTokens;\n\n\nclass User extends Authenticatable\n{\n\n    use \\Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n    use HasApiTokens, HasFactory, Notifiable;\n    \n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<int, string>\n     */\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n        'role',\n        'score'\n    ];\n\n    /**\n     * The attributes that should be hidden for serialization.\n     *\n     * @var array<int, string>\n     */\n    protected $hidden = [\n        'password',\n        'remember_token',\n    ];\n\n    /**\n     * The attributes that should be cast.\n     *\n     * @var array<string, string>\n     */\n    protected $casts = [\n        'email_verified_at' => 'datetime',\n    ];\n\n    public function hasPermissionTo()\n    {\n        return 'notifications admin';\n    }\n    public function placeDetails()\n    {\n        return $this->hasMany(PlaceDetail::class, 'user_id');\n    }\n\n\n}\n"
        }
    ]
}