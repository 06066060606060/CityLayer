{
    "sourceFile": "app/Models/PlaceDetails.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1696848031580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697226639364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,13 @@\n     public function observation(): BelongsTo\n     {\n         return $this->belongsTo(Observation::class);\n     }\n+    \n+    public function feeling(): BelongsTo\n+    {\n+        return $this->belongsTo(Feeling::class);\n+    }\n \n     /**\n      * Get the user that owns the PlaceDetails\n      *\n"
                },
                {
                    "date": 1697226745943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     }\n     \n     public function feeling(): BelongsTo\n     {\n-        return $this->belongsTo(Feeling::class);\n+        return $this->belongsTo(Feeling::class, 'feeling_id');\n     }\n \n     /**\n      * Get the user that owns the PlaceDetails\n"
                },
                {
                    "date": 1697228143265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n         'user_id',\n         'observation_id',\n         'observation_child_id',\n         'place_child_id',\n+        'feeling_id',\n         'image',\n         'latitude',\n         'longitude',\n     ];\n"
                },
                {
                    "date": 1697805632300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+<?php\n+\n+namespace App\\Models;\n+\n+use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n+use Illuminate\\Database\\Eloquent\\Model;\n+use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n+\n+class PlaceDetails extends Model\n+{\n+    use HasFactory;\n+\n+    protected $fillable = [\n+        'user_id',\n+        'feeling_id',\n+        'place_image',\n+        'place_description',\n+        'obsevation_image',\n+        'obsevation_description',\n+        'description',\n+        'latitude',\n+        'longitude',\n+    ];\n+\n+\n+    public function placeDetail()\n+    {\n+        return $this->hasOne(PlaceDetailPlace::class, 'place_detail_id', 'id');\n+    }\n+\n+    public function observationsDetail()\n+    {\n+        return $this->hasMany(PlaceDetailObservation::class, 'place_detail_id', 'id');\n+    }\n+    \n+    public function user(): BelongsTo\n+    {\n+        return $this->belongsTo(User::class);\n+    }\n+\n+    public function updatePlaces($place_detail,$request){\n+            PlaceDetailPlace::where('place_detail_id', $place_detail->id)->delete();\n+            if($request->place_id){\n+                PlaceDetailPlace::create([\n+                    'place_detail_id' => $place_detail->id,\n+                    'place_id' => $request->place_id,\n+                    'place_child_id' => $request->child_place_id?$request->child_place_id:NULL,\n+                ]);\n+            }\n+    }\n+    public function updateObservations($place_detail,$request){\n+        PlaceDetailObservation::where('place_detail_id', $place_detail->id)->delete();\n+        if(isset($request->observations) && is_array($request->observations) && count($request->observations)>0){\n+            foreach($request->observations as $obsrv){\n+                var_dump($obsrv);\n+                PlaceDetailObservation::create([\n+                    'place_detail_id' => $place_detail->id,\n+                    'observation_id' => $obsrv['observation_id'],\n+                    'observation_child_id' => $obsrv['child_observation_id']?$obsrv['child_observation_id']:NULL,\n+                    'feeling_id' => $obsrv['feeling_id'],\n+                ]);\n+            }\n+        }\n+    }\n+    public function updateMethod($place_detail,$request){\n+        $this->updatePlaces($place_detail,$request);\n+        $this->updateObservations($place_detail,$request);\n+    }\n+\n+}\n"
                },
                {
                    "date": 1697805668516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,11 @@\n     }\n     public function updateObservations($place_detail,$request){\n         PlaceDetailObservation::where('place_detail_id', $place_detail->id)->delete();\n         if(isset($request->observations) && is_array($request->observations) && count($request->observations)>0){\n+            var_dump($request->observations);\n             foreach($request->observations as $obsrv){\n-                var_dump($obsrv);\n+                \n                 PlaceDetailObservation::create([\n                     'place_detail_id' => $place_detail->id,\n                     'observation_id' => $obsrv['observation_id'],\n                     'observation_child_id' => $obsrv['child_observation_id']?$obsrv['child_observation_id']:NULL,\n@@ -67,67 +68,4 @@\n         $this->updateObservations($place_detail,$request);\n     }\n \n }\n-<?php\n-\n-namespace App\\Models;\n-\n-use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n-use Illuminate\\Database\\Eloquent\\Model;\n-use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n-\n-class PlaceDetails extends Model\n-{\n-    use HasFactory;\n-\n-    protected $fillable = [\n-        'place_id',\n-        'user_id',\n-        'observation_id',\n-        'observation_child_id',\n-        'place_child_id',\n-        'feeling_id',\n-        'image',\n-        'latitude',\n-        'longitude',\n-    ];\n-\n-\n-    /**\n-     * Get the place that owns the PlaceDetails\n-     *\n-     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n-     */\n-    public function place(): BelongsTo\n-    {\n-        return $this->belongsTo(Place::class);\n-    }\n-\n-\n-    /**\n-     * Get the observation that owns the PlaceDetails\n-     *\n-     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n-     */\n-    public function observation(): BelongsTo\n-    {\n-        return $this->belongsTo(Observation::class);\n-    }\n-    \n-    public function feeling(): BelongsTo\n-    {\n-        return $this->belongsTo(Feeling::class, 'feeling_id');\n-    }\n-\n-    /**\n-     * Get the user that owns the PlaceDetails\n-     *\n-     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n-     */\n-    public function user(): BelongsTo\n-    {\n-        return $this->belongsTo(User::class);\n-    }\n-\n-\n-}\n"
                },
                {
                    "date": 1697805701985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,9 @@\n     }\n     public function updateObservations($place_detail,$request){\n         PlaceDetailObservation::where('place_detail_id', $place_detail->id)->delete();\n         if(isset($request->observations) && is_array($request->observations) && count($request->observations)>0){\n-            var_dump($request->observations);\n             foreach($request->observations as $obsrv){\n-                \n                 PlaceDetailObservation::create([\n                     'place_detail_id' => $place_detail->id,\n                     'observation_id' => $obsrv['observation_id'],\n                     'observation_child_id' => $obsrv['child_observation_id']?$obsrv['child_observation_id']:NULL,\n"
                },
                {
                    "date": 1698519141249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,11 @@\n \n \n     public function getPlaceString()\n     {\n+        $html='<ul>';\n+\n+        $html.='</ul>';\n         return $this->placeDetail->place->name.($this->placeDetail->placeChild?' → '.$this->placeDetail->placeChild->name:'');\n     }\n     public function getObservationString()\n     {\n"
                },
                {
                    "date": 1698519234558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+<?php\n+\n+namespace App\\Models;\n+\n+use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n+use Illuminate\\Database\\Eloquent\\Model;\n+use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n+use Backpack\\CRUD\\app\\Models\\Traits\\CrudTrait;\n+\n+class PlaceDetails extends Model\n+{\n+    use HasFactory;\n+    use CrudTrait;\n+\n+    protected $fillable = [\n+        'user_id',\n+        'feeling_id',\n+        'place_image',\n+        'place_description',\n+        'obsevation_image',\n+        'obsevation_description',\n+        'description',\n+        'latitude',\n+        'longitude',\n+    ];\n+\n+\n+    public function getPlaceString()\n+    {\n+        $html='<ul>';\n+\n+        $html.='<li>'.$this->placeDetail->place->name;\n+\n+        $html.='<ul><li>'.($this->placeDetail->placeChild?' → '.$this->placeDetail->placeChild->name:'').'</li></ul>';\n+\n+        $html.='</li></ul>';\n+        return ;\n+    }\n+    public function getObservationString()\n+    {\n+\n+        $observationString=NULL;\n+\n+        foreach ($this->observationsDetail as $observation) {\n+            $observationName = $observation->observation->name;\n+            $observationChildName = $observation->observationChild ? ' → ' . $observation->observationChild->name : '';\n+            $observationString .= $observationName . $observationChildName . ', ';\n+        }\n+        if(empty($observationString)){\n+            $observationString='No Observation';\n+        }\n+        $observationString = rtrim($observationString, ', ');\n+\n+\n+\n+        return $observationString;\n+    }\n+\n+    public function placeDetail()\n+    {\n+        return $this->hasOne(PlaceDetailPlace::class, 'place_detail_id', 'id');\n+    }\n+\n+    public function observationsDetail()\n+    {\n+        return $this->hasMany(PlaceDetailObservation::class, 'place_detail_id', 'id');\n+    }\n+    \n+    public function user(): BelongsTo\n+    {\n+        return $this->belongsTo(User::class);\n+    }\n+\n+    public function updatePlaces($place_detail,$request){\n+            PlaceDetailPlace::where('place_detail_id', $place_detail->id)->delete();\n+            if($request->place_id){\n+                PlaceDetailPlace::create([\n+                    'place_detail_id' => $place_detail->id,\n+                    'place_id' => $request->place_id,\n+                    'place_child_id' => $request->child_place_id?$request->child_place_id:NULL,\n+                ]);\n+            }\n+    }\n+    public function updateObservations($place_detail,$request){\n+        PlaceDetailObservation::where('place_detail_id', $place_detail->id)->delete();\n+        if(isset($request->observations) && is_array($request->observations) && count($request->observations)>0){\n+            foreach($request->observations as $obsrv){\n+                PlaceDetailObservation::create([\n+                    'place_detail_id' => $place_detail->id,\n+                    'observation_id' => $obsrv['observation_id'],\n+                    'observation_child_id' => $obsrv['child_observation_id']?$obsrv['child_observation_id']:NULL,\n+                    'feeling_id' => $obsrv['feeling_id'],\n+                ]);\n+            }\n+        }\n+    }\n+    public function updateMethod($place_detail,$request){\n+        $this->updatePlaces($place_detail,$request);\n+        $this->updateObservations($place_detail,$request);\n+    }\n+\n+}\n"
                }
            ],
            "date": 1696848031580,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass PlaceDetails extends Model\n{\n    use HasFactory;\n\n    protected $fillable = [\n        'place_id',\n        'user_id',\n        'observation_id',\n        'observation_child_id',\n        'place_child_id',\n        'image',\n        'latitude',\n        'longitude',\n    ];\n\n\n    /**\n     * Get the place that owns the PlaceDetails\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n     */\n    public function place(): BelongsTo\n    {\n        return $this->belongsTo(Place::class);\n    }\n\n\n    /**\n     * Get the observation that owns the PlaceDetails\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n     */\n    public function observation(): BelongsTo\n    {\n        return $this->belongsTo(Observation::class);\n    }\n\n    /**\n     * Get the user that owns the PlaceDetails\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n     */\n    public function user(): BelongsTo\n    {\n        return $this->belongsTo(User::class);\n    }\n\n\n}\n"
        }
    ]
}