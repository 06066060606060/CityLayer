{
    "sourceFile": "app/Http/Controllers/GlobalController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1701284594528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1701284599878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -797,8 +797,10 @@\n         if(request()->only){\n             $only=true;\n         }\n \n+        var_dump($only);\n+\n         die();\n \n         if ($edit_id) {\n             $checkplace = PlaceDetails::find($edit_id);\n"
                },
                {
                    "date": 1701284614011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -797,12 +797,8 @@\n         if(request()->only){\n             $only=true;\n         }\n \n-        var_dump($only);\n-\n-        die();\n-\n         if ($edit_id) {\n             $checkplace = PlaceDetails::find($edit_id);\n             if (!($checkplace && $checkplace->user_id == backpack_auth()->user()->id)) {\n                 return redirect('/');\n"
                },
                {
                    "date": 1701284621647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -818,9 +818,9 @@\n             ->get();\n \n         $feelings = Feeling::all();\n \n-        return view('add-new-place', compact('allObservations', 'allPlaces', 'type', 'feelings', 'edit_id'));\n+        return view('add-new-place', compact('allObservations', 'allPlaces', 'type', 'feelings', 'edit_id','only'));\n     }\n \n \n \n"
                },
                {
                    "date": 1701284951389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -379,9 +379,9 @@\n                 'gender' => $request->gender,\n                 'profession' => $request->profession,\n             ]);\n \n-            return redirect('preferences');\n+            return redirect('/');\n         } else {\n             backpack_auth()->user()->email = $request->email;\n             backpack_auth()\n                 ->user()\n@@ -413,9 +413,9 @@\n                     ->save();\n             }\n             $infos->newuser = 0;\n             $infos->save();\n-            return redirect('preferences');\n+            return redirect('/');\n         }\n     }\n \n     public function savepreferences(Request $request)\n"
                },
                {
                    "date": 1701285491589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,8 +366,19 @@\n \n     public function saveprofile(Request $request)\n     {\n         $userid = backpack_auth()->user()->id;\n+\n+\n+        $request->validate([\n+            'your_column' => [\n+                'required',\n+                Rule::unique('your_table')->ignore($id),\n+            ],\n+            // other validation rules...\n+        ]);\n+\n+\n         $infos = Infosperso::where('user_id', $userid)->first();\n         if (backpack_auth()->user()->score > 0) {\n             backpack_auth()->user()->email = $request->email;\n             backpack_auth()\n"
                },
                {
                    "date": 1701285497291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,9 +371,9 @@\n \n         $request->validate([\n             'your_column' => [\n                 'required',\n-                Rule::unique('your_table')->ignore($id),\n+                Rule::unique('users')->ignore($id),\n             ],\n             // other validation rules...\n         ]);\n \n"
                },
                {
                    "date": 1701285529085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,9 +376,11 @@\n             ],\n             // other validation rules...\n         ]);\n \n+        try {\n \n+\n         $infos = Infosperso::where('user_id', $userid)->first();\n         if (backpack_auth()->user()->score > 0) {\n             backpack_auth()->user()->email = $request->email;\n             backpack_auth()\n"
                },
                {
                    "date": 1701285546020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,55 +380,59 @@\n         try {\n \n \n         $infos = Infosperso::where('user_id', $userid)->first();\n-        if (backpack_auth()->user()->score > 0) {\n-            backpack_auth()->user()->email = $request->email;\n-            backpack_auth()\n-                ->user()\n-                ->save();\n-            Infosperso::where('user_id', $userid)->update([\n-                'email' => $request->email,\n-                'age' => $request->age,\n-                'gender' => $request->gender,\n-                'profession' => $request->profession,\n-            ]);\n-\n-            return redirect('/');\n-        } else {\n-            backpack_auth()->user()->email = $request->email;\n-            backpack_auth()\n-                ->user()\n-                ->save();\n-            $infos = Infosperso::where('user_id', $userid)->first();\n-            $infos->user_id = $userid;\n-            $infos->age = $request->age;\n-            if ($request->age != null) {\n-                backpack_auth()->user()->score =\n-                    backpack_auth()->user()->score + 1;\n+            if (backpack_auth()->user()->score > 0) {\n+                backpack_auth()->user()->email = $request->email;\n                 backpack_auth()\n                     ->user()\n                     ->save();\n-            }\n-            $infos->gender = $request->gender;\n-            if ($request->gender != null) {\n-                backpack_auth()->user()->score =\n-                    backpack_auth()->user()->score + 1;\n+                Infosperso::where('user_id', $userid)->update([\n+                    'email' => $request->email,\n+                    'age' => $request->age,\n+                    'gender' => $request->gender,\n+                    'profession' => $request->profession,\n+                ]);\n+\n+                return redirect('/');\n+            } else {\n+                backpack_auth()->user()->email = $request->email;\n                 backpack_auth()\n                     ->user()\n                     ->save();\n+                $infos = Infosperso::where('user_id', $userid)->first();\n+                $infos->user_id = $userid;\n+                $infos->age = $request->age;\n+                if ($request->age != null) {\n+                    backpack_auth()->user()->score =\n+                        backpack_auth()->user()->score + 1;\n+                    backpack_auth()\n+                        ->user()\n+                        ->save();\n+                }\n+                $infos->gender = $request->gender;\n+                if ($request->gender != null) {\n+                    backpack_auth()->user()->score =\n+                        backpack_auth()->user()->score + 1;\n+                    backpack_auth()\n+                        ->user()\n+                        ->save();\n+                }\n+                $infos->profession = $request->profession;\n+                if ($request->profession != null) {\n+                    backpack_auth()->user()->score =\n+                        backpack_auth()->user()->score + 1;\n+                    backpack_auth()\n+                        ->user()\n+                        ->save();\n+                }\n+                $infos->newuser = 0;\n+                $infos->save();\n+                return redirect('/');\n             }\n-            $infos->profession = $request->profession;\n-            if ($request->profession != null) {\n-                backpack_auth()->user()->score =\n-                    backpack_auth()->user()->score + 1;\n-                backpack_auth()\n-                    ->user()\n-                    ->save();\n-            }\n-            $infos->newuser = 0;\n-            $infos->save();\n-            return redirect('/');\n+        } catch (\\Exception $e) {\n+            // Handle any exceptions that may occur during the update\n+            return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n         }\n     }\n \n     public function savepreferences(Request $request)\n"
                },
                {
                    "date": 1701285586105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,19 +369,17 @@\n         $userid = backpack_auth()->user()->id;\n \n \n         $request->validate([\n-            'your_column' => [\n+            'name' => [\n                 'required',\n-                Rule::unique('users')->ignore($id),\n+                Rule::unique('users')->ignore($userid),\n             ],\n             // other validation rules...\n         ]);\n \n         try {\n-\n-\n-        $infos = Infosperso::where('user_id', $userid)->first();\n+            $infos = Infosperso::where('user_id', $userid)->first();\n             if (backpack_auth()->user()->score > 0) {\n                 backpack_auth()->user()->email = $request->email;\n                 backpack_auth()\n                     ->user()\n"
                },
                {
                    "date": 1701285619847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,901 @@\n+<?php\n+\n+namespace App\\Http\\Controllers;\n+\n+use Illuminate\\Support\\Facades\\DB;\n+use App\\Models\\Infosperso;\n+use App\\Models\\User;\n+use App\\Models\\Street;\n+use App\\Models\\Building;\n+use App\\Models\\Openspace;\n+use App\\Models\\Opinion;\n+use App\\Models\\Opinion_de;\n+use App\\Models\\Comment_en;\n+use App\\Models\\Comment_de;\n+use App\\Models\\Observation;\n+use App\\Models\\Pages;\n+use App\\Models\\Place;\n+use App\\Models\\PlaceLike;\n+use App\\Models\\PlaceComment;\n+use App\\Models\\Feeling;\n+use App\\Models\\PlaceDetails;\n+use App\\Models\\PlaceDetailPlace;\n+use App\\Models\\PlaceDetailObservation;\n+use App\\Models\\Stat;\n+use App\\Models\\Preference;\n+\n+use Illuminate\\Http\\Request;\n+use Illuminate\\Support\\Facades\\Validator;\n+\n+use Illuminate\\Validation\\Rule;\n+\n+\n+class GlobalController extends Controller\n+{\n+\n+    public $place_id;\n+    /**\n+     * Handle the incoming request.\n+     *\n+     * @param  \\Illuminate\\Http\\Request  $request\n+     * @return \\Illuminate\\Http\\Response\n+     */\n+\n+\n+    public function getAll($edit_id = '')\n+    {\n+\n+        if (backpack_auth()->check()) {\n+            $userid = backpack_auth()->user()->id;\n+\n+            // check for edit\n+            if ($edit_id) {\n+                $checkplace = PlaceDetails::find($edit_id);\n+                if (!($checkplace && $checkplace->user_id == $userid)) {\n+                    return redirect('/');\n+                }\n+            }\n+\n+\n+            if (Infosperso::where('user_id', $userid)->exists()) {\n+                $infos = Infosperso::where('user_id', $userid)->first();\n+\n+                $allPlaces = Place::where('user_id', null)\n+                    ->where('parent_id', NULL)\n+                    ->orWhere('user_id', backpack_auth()->user()->id)\n+                    ->get();\n+\n+                // dd($allPlaces);\n+\n+                $allObservations = Observation::where('user_id', null)\n+                    ->where('parent_id', NULL)\n+                    ->orWhere('user_id', backpack_auth()->user()->id)\n+                    ->get();\n+\n+\n+\n+                $query = PlaceDetails::whereNotNull('latitude')->whereNotNull('longitude')\n+                    ->with([\n+                        'placeDetail',\n+                        'placeDetail.place',\n+                        'placeDetail.placeChild',\n+                        'observationsDetail',\n+                        'observationsDetail.observation',\n+                        'observationsDetail.observationChild',\n+                        'observationsDetail.feeling',\n+                        'user',\n+                        'placeComment' => function ($query) {\n+                            $query->where('user_id', backpack_auth()->user()->id);\n+                        }\n+                    ]);\n+\n+                if (session()->has('placeIds') && count(session('placeIds')) > 0 && session()->has('observationIds') && count(session('observationIds')) > 0) {\n+\n+                    $query->where(function ($query) {\n+                        $query->whereHas('placeDetail', function ($subQuery) {\n+                            $subQuery->whereIn('place_id', session('placeIds'));\n+                        });\n+                    });\n+                    $query->orWhere(function ($query) {\n+                        $query->whereHas('observationsDetail', function ($subQuery) {\n+                            $subQuery->whereIn('observation_id', session('observationIds'));\n+                        });\n+                    });\n+                } elseif (session()->has('placeIds') && count(session('placeIds')) > 0) {\n+                    $query->where(function ($query) {\n+                        $query->whereHas('placeDetail', function ($subQuery) {\n+                            $subQuery->whereIn('place_id', session('placeIds'));\n+                        });\n+                    });\n+                } elseif (session()->has('observationIds') && count(session('observationIds')) > 0) {\n+                    $query->Where(function ($query) {\n+                        $query->whereHas('observationsDetail', function ($subQuery) {\n+                            $subQuery->whereIn('observation_id', session('observationIds'));\n+                        });\n+                    });\n+                }\n+\n+\n+\n+\n+                // var_dump(session('placeIds'));\n+                // die();\n+\n+\n+                $all_data = $query->get();\n+\n+\n+                $feelings = Feeling::all();\n+\n+                $edited_place = PlaceDetails::with(['observationsDetail.feeling', 'observationsDetail', 'placeDetail'])->find($edit_id);\n+\n+                $likedPlaces = backpack_auth()->user()->likedPlaces->pluck('place_detail_id');\n+\n+                return view(\n+                    'home',\n+                    compact(\n+                        'infos',\n+                        'all_data',\n+                        'userid',\n+                        'allPlaces',\n+                        'allObservations',\n+                        'feelings',\n+                        'likedPlaces',\n+                        'edited_place',\n+                        'edit_id'\n+                    )\n+                );\n+            } else {\n+                $infos = new Infosperso();\n+                $infos->user_id = $userid;\n+                $infos->save();\n+                return view('edit_profile');\n+            }\n+        } else {\n+            return view('index');\n+        }\n+\n+        // dd('good');\n+    }\n+\n+    // public function getAll()\n+    // {\n+    //     return view('index');\n+    // }\n+\n+    public function community_achievements()\n+    {\n+\n+        $usersWithTotals = User::select('*')\n+            ->addSelect(['total_places' => PlaceDetailPlace::selectRaw('COUNT(*)')\n+                ->whereIn('place_detail_id', PlaceDetails::select('id')\n+                    ->whereColumn('user_id', 'users.id'))])\n+            ->addSelect(['total_observations' => PlaceDetailObservation::selectRaw('COUNT(*)')\n+                ->whereIn('place_detail_id', PlaceDetails::select('id')\n+                    ->whereColumn('user_id', 'users.id'))])\n+            ->orderBy('score', 'desc')->paginate(10);\n+\n+        return view('community_acheivements', compact('usersWithTotals'));\n+    }\n+\n+    public function loadMore_community_achievements(Request $request)\n+    {\n+        $page = $request->get('page');\n+\n+        $usersWithTotals = User::select('*')\n+            ->addSelect(['total_places' => PlaceDetailPlace::selectRaw('COUNT(*)')\n+                ->whereIn('place_detail_id', PlaceDetails::select('id')\n+                    ->whereColumn('user_id', 'users.id'))])\n+            ->addSelect(['total_observations' => PlaceDetailObservation::selectRaw('COUNT(*)')\n+                ->whereIn('place_detail_id', PlaceDetails::select('id')\n+                    ->whereColumn('user_id', 'users.id'))])\n+            ->orderBy('score', 'desc')->paginate(10, ['*'], 'page', $page);\n+\n+        $html = view('item_community_acheivements', compact('usersWithTotals'))->render();\n+\n+        return response()->json(['html' => $html, 'hasMorePages' => $usersWithTotals->hasMorePages()]);\n+    }\n+\n+\n+\n+\n+\n+    // public function profil()\n+    // {\n+    //     return view('home');\n+    // }\n+\n+    private function haversine($lat1, $lon1, $lat2, $lon2)\n+    {\n+        $earthRadius = 6371000; // in meters\n+        $dLat = deg2rad($lat2 - $lat1);\n+        $dLon = deg2rad($lon2 - $lon1);\n+        $a = sin($dLat / 2) * sin($dLat / 2) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * sin($dLon / 2) * sin($dLon / 2);\n+        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));\n+        $distance = $earthRadius * $c;\n+\n+        return $distance;\n+    }\n+\n+    public function allbadges()\n+    {\n+        $explorer = 0;\n+        if (backpack_auth()->user()->placeDetails->count() > 0) {\n+            $explorer = 1;\n+        }\n+\n+        $citymaker = 0;\n+        if (backpack_auth()->user()->observations->count() >= 10) {\n+            $citymaker = 1;\n+        }\n+\n+\n+        $architect = 0;\n+        $allplace = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n+            return $placeDetail->placeDetail->pluck('place_id');\n+        });\n+        if ($allplace->count() >= 20) {\n+            $architect = 1;\n+        }\n+\n+        $flaneur = 0;\n+        $allobservation = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n+            return $placeDetail->observationsDetail->map(function ($observation) {\n+                return $observation->only(['place_detail_id', 'observation_id']);\n+            });\n+        })->unique();\n+        if ($allobservation->count() >= 20) {\n+            $flaneur = 1;\n+        }\n+\n+\n+        $urbanist = 0;\n+        $higherCount = max($allplace->count(), $allobservation->count());\n+        if ($higherCount >= 30) {\n+            $urbanist = 1;\n+        }\n+\n+        $influencer = 0;\n+        $alllikes = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n+            return $placeDetail->placeLikes;\n+        });\n+        if ($alllikes->count() >= 10) {\n+            $influencer = 1;\n+        }\n+\n+        $star = 0;\n+        if ($alllikes->count() >= 20) {\n+            $star = 1;\n+        }\n+\n+        $guru = 0;\n+        if (backpack_auth()->user()->likedPlaces->count() >= 10) {\n+            $guru = 1;\n+        }\n+\n+        $investigator = 0;\n+        $totalImagesCount = backpack_auth()->user()->placeDetails->sum(function ($placeDetail) {\n+            $observationImageCount = !empty($placeDetail->obsevation_image) ? 1 : 0;\n+            $placeImageCount = !empty($placeDetail->place_image) ? 1 : 0;\n+            return $observationImageCount + $placeImageCount;\n+        });\n+\n+        if (($totalImagesCount) >= 10) {\n+            $investigator = 1;\n+        }\n+\n+        $supermapper = 0;\n+        if (backpack_auth()->user()->score >= 500) {\n+            $supermapper = 1;\n+        }\n+\n+        return compact(\n+            'explorer',\n+            'citymaker',\n+            'architect',\n+            'flaneur',\n+            'urbanist',\n+            'influencer',\n+            'star',\n+            'guru',\n+            'investigator',\n+            'supermapper',\n+        );\n+    }\n+\n+    public function profile()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $name = backpack_auth()->user()->name;\n+        $score = backpack_auth()->user()->score;\n+        $infos = Infosperso::where('user_id', $userid)->first();\n+        $preferences = explode(',', $infos->preferences);\n+        $preferences = preg_replace('/[^A-Za-z0-9 ]/', '', $preferences);\n+\n+        $badgeData = $this->allbadges();\n+        extract($badgeData);\n+\n+\n+\n+        // dd($citymaker);\n+        return view(\n+            'profile',\n+            compact(\n+                'name',\n+                'score',\n+                'preferences',\n+\n+                'citymaker',\n+                'architect',\n+                'explorer',\n+\n+\n+            )\n+        );\n+    }\n+    public function badges_overview()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $locale = session()->get('locale');\n+        $name = backpack_auth()->user()->name;\n+        $score = backpack_auth()->user()->score;\n+\n+        $badgeData = $this->allbadges();\n+        extract($badgeData);\n+\n+\n+\n+\n+        // dd($citymaker);\n+        return view(\n+            'badges_overview',\n+            compact(\n+                'name',\n+                'score',\n+                'explorer',\n+                'citymaker',\n+                'architect',\n+                'flaneur',\n+                'urbanist',\n+                'influencer',\n+                'star',\n+                'guru',\n+                'investigator',\n+                'supermapper',\n+\n+            )\n+        );\n+    }\n+\n+    public function saveprofile(Request $request)\n+    {\n+        $userid = backpack_auth()->user()->id;\n+\n+\n+        $request->validate([\n+            'name' => [\n+                'required',\n+                Rule::unique('users')->ignore($userid),\n+            ],\n+            // other validation rules...\n+        ]);\n+\n+        try {\n+            $infos = Infosperso::where('user_id', $userid)->first();\n+            if (backpack_auth()->user()->score > 0) {\n+                backpack_auth()->user()->email = $request->email;\n+                backpack_auth()\n+                    ->user()\n+                    ->save();\n+                Infosperso::where('user_id', $userid)->update([\n+                    'email' => $request->email,\n+                    'age' => $request->age,\n+                    'gender' => $request->gender,\n+                    'profession' => $request->profession,\n+                ]);\n+\n+                return redirect('/');\n+            } else {\n+                backpack_auth()->user()->email = $request->email;\n+                backpack_auth()\n+                    ->user()\n+                    ->save();\n+                $infos = Infosperso::where('user_id', $userid)->first();\n+                $infos->user_id = $userid;\n+                $infos->age = $request->age;\n+                if ($request->age != null) {\n+                    backpack_auth()->user()->score =\n+                        backpack_auth()->user()->score + 1;\n+                    backpack_auth()\n+                        ->user()\n+                        ->save();\n+                }\n+                $infos->gender = $request->gender;\n+                if ($request->gender != null) {\n+                    backpack_auth()->user()->score =\n+                        backpack_auth()->user()->score + 1;\n+                    backpack_auth()\n+                        ->user()\n+                        ->save();\n+                }\n+                $infos->profession = $request->profession;\n+                if ($request->profession != null) {\n+                    backpack_auth()->user()->score =\n+                        backpack_auth()->user()->score + 1;\n+                    backpack_auth()\n+                        ->user()\n+                        ->save();\n+                }\n+                $infos->newuser = 0;\n+                $infos->save();\n+                return redirect('/');\n+            }\n+        } catch (\\Exception $e) {\n+            // Handle any exceptions that may occur during the update\n+            return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n+        }\n+    }\n+\n+    public function savepreferences(Request $request)\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $infos = Infosperso::where('user_id', $userid)->first();\n+        $infos->preferences = $request->preferences;\n+        $infos->save();\n+\n+        return redirect('/');\n+    }\n+\n+    public function newpreference(Request $request)\n+    {\n+\n+        $userid = backpack_auth()->user()->id;\n+\n+\n+\n+\n+        $tag = strtolower($request->preference);\n+        $preference = Preference::create([\n+            'user_id' => $userid,\n+            'name' => $tag,\n+        ]);\n+        if ($preference) {\n+            $infos = Infosperso::where('user_id', $userid)->first();\n+            $existingPreferences = explode(',', $infos->preferences);\n+            $existingPreferences = preg_replace('/[^A-Za-z0-9 ]/', '', $existingPreferences);\n+            $existingPreferences[] = $tag;\n+            $infos->preferences = $existingPreferences;\n+            $infos->save();\n+        }\n+\n+        return redirect('/preferences');\n+    }\n+\n+    public function preferences()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $infos = Infosperso::where('user_id', $userid)->first();\n+\n+        $preferences = explode(',', $infos->preferences);\n+        $preferences = preg_replace('/[^A-Za-z0-9 ]/', '', $preferences);\n+\n+        $preferences_array = Preference::getPreferences($userid);\n+\n+\n+        return view('preferences', compact('preferences', 'preferences_array'));\n+    }\n+\n+\n+\n+    public function avatar(Request $request)\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        //dd($request->all());\n+        $request->validate([\n+            'image' => 'required|image|mimes:jpeg,png,jpg',\n+        ]);\n+\n+        $imageName = time() . '.' . $request->image->extension();\n+\n+        $request->image->storeAs('public/uploads/avatar/', $imageName);\n+\n+        $user = User::find($userid);\n+\n+        backpack_auth()->user()->score = backpack_auth()->user()->score + 1;\n+        backpack_auth()\n+            ->user()\n+            ->save();\n+\n+        $user->avatar = $imageName;\n+        $user->save();\n+\n+        return back();\n+    }\n+\n+    public function placeDetail($id)\n+    {\n+\n+        if ($id) {\n+            $placeSignle = PlaceDetails::find($id);\n+            if (!($placeSignle && $placeSignle->user_id == backpack_auth()->user()->id)) {\n+                return redirect('/');\n+            }\n+\n+\n+            return view('placeDetail', compact('placeSignle'));\n+        }\n+    }\n+    public function dashboard()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $placeDetails = User::with('placeDetails')->find($userid)->placeDetails()->orderBy('id', 'desc')->paginate(10);\n+\n+        $score = backpack_auth()->user()->score;\n+\n+\n+        return view('dashboard', compact('placeDetails', 'score'));\n+    }\n+    public function loadMore_dashboard(Request $request)\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $page = $request->get('page');\n+\n+        $placeDetails = User::with('placeDetails')->find($userid)->placeDetails()->orderBy('id', 'desc')->paginate(10, ['*'], 'page', $page);\n+\n+        $html = view('item_dashboard', compact('placeDetails'))->render();\n+\n+        return response()->json(['html' => $html, 'hasMorePages' => $placeDetails->hasMorePages()]);\n+    }\n+\n+\n+\n+\n+\n+\n+\n+    static function pages()\n+    {\n+        $pages = Pages::all();\n+        return $pages;\n+    }\n+\n+    static function allusers()\n+    {\n+        $users = User::all();\n+        return $users;\n+    }\n+\n+    static function infosperso()\n+    {\n+        $infos = Infosperso::all();\n+        return $infos;\n+    }\n+\n+    static function myprofile()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $infos = Infosperso::where('user_id', $userid)->first();\n+        return $infos;\n+    }\n+\n+\n+    //----------------------new code----------------------\n+\n+\n+    function addNewPlaceData($postData)\n+    {\n+\n+        $result_array = [];\n+        if (isset($postData->place_name) && !empty($postData->place_name)) {\n+\n+\n+            $check = Place::where('name', $postData->place_name)->exists();\n+\n+            if ($check) {\n+\n+                return false;\n+            }\n+\n+\n+\n+            $place = Place::create([\n+                'name' => $postData->place_name,\n+                'user_id' => backpack_user()->id,\n+            ]);\n+            $result_array['place_id'] = $place->id;\n+        }\n+        if (isset($postData->observation_name) && !empty($postData->observation_name)) {\n+\n+            $check = Observation::where('name', $postData->observation_name)->exists();\n+\n+            if ($check) {\n+\n+                return false;\n+            }\n+\n+            $observation = Observation::create([\n+                'name' => $postData->observation_name,\n+                'user_id' => backpack_user()->id,\n+            ]);\n+            $result_array['observations'][] = array(\n+                'observation_id' => $observation->id,\n+                'child_observation_id' => NULL,\n+                'feeling_id' => $postData->feeling_id ? $postData->feeling_id : NULL,\n+            );\n+        }\n+\n+        return (object)$result_array;\n+    }\n+\n+    public function addMapPlace(Request $request, $id = null)\n+    {\n+\n+        $postData = json_decode($request->place_data, true);\n+        $postData = (object)$postData;\n+        $returnData = $this->addNewPlaceData($postData);\n+\n+        if ($returnData == false) {\n+            $response['status'] = 'error';\n+            $response['msg'] = 'Place or observation already exist!';\n+            return response()->json($response);\n+        }\n+        $postData = (object)array_merge((array)$postData, (array)$returnData);\n+\n+\n+        //    dd($postData);\n+\n+        $userId = backpack_auth()->user()->id;\n+        $response = ['status' => '', 'msg' => '', 'place_detail_id' => '', 'tab' => '', 'completed' => false];\n+\n+        if (isset($postData->place_detail_id) && $postData->place_detail_id != '') {\n+            $place_detail = PlaceDetails::find($postData->place_detail_id);\n+        } else {\n+            $latitude = $postData->latitude;\n+            $longitude = $postData->longitude;\n+            $radius = 100; // Meters\n+            $place_detail = PlaceDetails::selectRaw(\"*,\n+                    ( 6371 * acos( cos( radians(?) )\n+                    * cos( radians( latitude ) )\n+                    * cos( radians( longitude ) - radians(?)) + sin( radians(?) )\n+                    * sin( radians( latitude ) ) )) AS distance\", [$latitude, $longitude, $latitude])\n+                ->having(\"distance\", \"<\", ($radius / 1000))\n+                ->where('user_id', $userId)\n+                ->first();\n+        }\n+\n+\n+\n+\n+        if (isset($place_detail)) {\n+\n+            $place_detail->update([\n+                'user_id' =>  backpack_auth()->user()->id,\n+                'place_description' =>  $postData->place_description ? $postData->place_description : NULL,\n+                'obsevation_description' =>  $postData->observation_description ? $postData->observation_description : NULL,\n+                // 'latitude' => $postData->latitude,\n+                // 'longitude' => $postData->longitude,\n+            ]);\n+\n+            if (isset($postData->update) && $postData->update == 'place') {\n+                $place_detail->updatePlaces($place_detail, $postData);\n+            } else if (isset($postData->update) && $postData->update == 'observation') {\n+                $place_detail->updateObservations($place_detail, $postData);\n+            } else {\n+\n+                dd('here');\n+                // $place_detail->updateMethod($place_detail,$postData);\n+            }\n+\n+\n+            $response['status'] = 'success';\n+            $response['msg'] = 'data updated successfully!';\n+        } else {\n+            $place_detail = PlaceDetails::create([\n+                'user_id' =>  backpack_auth()->user()->id,\n+                'place_description' =>  $postData->place_description ? $postData->place_description : NULL,\n+                'obsevation_description' =>  $postData->observation_description ? $postData->observation_description : NULL,\n+                'latitude' => $postData->latitude,\n+                'longitude' => $postData->longitude,\n+            ]);\n+\n+            if ($postData->place_id) {\n+                PlaceDetailPlace::create([\n+                    'place_detail_id' => $place_detail->id,\n+                    'place_id' => $postData->place_id,\n+                    'place_child_id' => $postData->child_place_id ? $postData->child_place_id : NULL,\n+                ]);\n+            }\n+\n+            if (isset($postData->observations) && is_array($postData->observations) && count($postData->observations) > 0) {\n+                foreach ($postData->observations as $obsrv) {\n+                    PlaceDetailObservation::create([\n+                        'place_detail_id' => $place_detail->id,\n+                        'observation_id' => $obsrv['observation_id'],\n+                        'observation_child_id' => $obsrv['child_observation_id'] ? $obsrv['child_observation_id'] : NULL,\n+                        'feeling_id' => $obsrv['feeling_id'],\n+                    ]);\n+                }\n+            }\n+\n+\n+\n+            backpack_auth()->user()->incrementScore(1);\n+            $response['status'] = 'success';\n+            $response['msg'] = 'data added successfully!';\n+        }\n+\n+        if ($request->hasFile('place_image')) {\n+            $request->validate([\n+                'place_image' => 'required|image|mimes:jpeg,png,jpg,gif',\n+            ]);\n+            $imageName = time() . '_place.' . $request->place_image->extension();\n+            $request->place_image->storeAs('public/uploads/place/', $imageName);\n+\n+            $place_detail->update([\n+                'place_image' =>  $imageName,\n+            ]);\n+        }\n+\n+        if ($request->hasFile('observation_image')) {\n+            $request->validate([\n+                'observation_image' => 'required|image|mimes:jpeg,png,jpg,gif',\n+            ]);\n+            $imageName = time() . '_observation.' . $request->observation_image->extension();\n+            $request->observation_image->storeAs('public/uploads/observation/', $imageName);\n+            $place_detail->update([\n+                'obsevation_image' =>  $imageName,\n+            ]);\n+        }\n+\n+\n+\n+        $response['place_detail_id'] = $place_detail->id;\n+\n+\n+        if ((isset($place_detail->placeDetail) && $place_detail->placeDetail->id) && (isset($place_detail->observationsDetail) &&  count($place_detail->observationsDetail)) > 0) {\n+            $response['completed'] = true;\n+        }\n+\n+        $response['tab'] = $postData->tab;\n+\n+        $response['place_id'] = $place_detail->placeDetail->place_id ?? null;\n+\n+        return response()->json($response);\n+    }\n+\n+\n+    public function addNewPlace(Request $request)\n+    {\n+\n+\n+\n+        if ($request->place_name) {\n+            $place = Place::create([\n+                'name' => $request->place_name,\n+                'user_id' => backpack_user()->id,\n+            ]);\n+        }\n+\n+        if ($request->observation_name) {\n+            $observation = Observation::create([\n+                'name' => $request->observation_name,\n+                'user_id' => backpack_user()->id,\n+            ]);\n+        }\n+\n+\n+        PlaceDetails::create([\n+            'place_id' => $place->id ?? NULL,\n+            'observation_id' => $observation->id ?? NULL,\n+            'user_id' =>  backpack_auth()->user()->id,\n+            'latitude' => $request->latitude,\n+            'longitude' => $request->longitude,\n+\n+        ]);\n+\n+        if ($request->observation_name) {\n+            return response()->json([\n+                'status' => 'success',\n+                'msg' => 'Observation added successfully, You can also add place for this place!',\n+\n+            ]);\n+        } else {\n+            return response()->json([\n+                'status' => 'success',\n+                'msg' => 'Place added successfully, You also add obervation for this place!',\n+\n+            ]);\n+        }\n+    }\n+\n+\n+    public function createNew($type = 'place', $edit_id = null)\n+    {\n+        $only=false;\n+        if(request()->only){\n+            $only=true;\n+        }\n+\n+        if ($edit_id) {\n+            $checkplace = PlaceDetails::find($edit_id);\n+            if (!($checkplace && $checkplace->user_id == backpack_auth()->user()->id)) {\n+                return redirect('/');\n+            }\n+        }\n+\n+        $allPlaces = Place::where('user_id', null)\n+            ->where('parent_id', NULL)\n+            ->orWhere('user_id', backpack_auth()->user()->id)\n+            ->get();\n+\n+\n+\n+        $allObservations = Observation::where('user_id', null)\n+            ->where('parent_id', NULL)\n+            ->orWhere('user_id', backpack_auth()->user()->id)\n+            ->get();\n+\n+        $feelings = Feeling::all();\n+\n+        return view('add-new-place', compact('allObservations', 'allPlaces', 'type', 'feelings', 'edit_id','only'));\n+    }\n+\n+\n+\n+    public function filter()\n+    {\n+\n+        return view('filter');\n+    }\n+\n+\n+    public function saveDes(Request $request)\n+    {\n+\n+        PlaceDetails::where('id', $request->id)\n+            ->update([\n+\n+                'description' => $request->data\n+\n+            ]);\n+    }\n+    public function saveComment(Request $request)\n+    {\n+        PlaceComment::updateOrcreate(\n+            [\n+                'place_detail_id' => $request->id,\n+                'user_id' => backpack_auth()->user()->id,\n+            ],\n+            [\n+                'comment' => $request->data,\n+            ]\n+        );\n+    }\n+\n+    public function setLike(Request $request)\n+    {\n+\n+        $placeLike = PlaceLike::where('place_detail_id', $request->id)\n+            ->where('user_id', backpack_auth()->user()->id)\n+            ->first();\n+\n+        if ($placeLike) {\n+            $placeLike->delete();\n+        } else {\n+            PlaceLike::create([\n+                'place_detail_id' => $request->id,\n+                'user_id' => backpack_auth()->user()->id,\n+            ]);\n+        }\n+    }\n+\n+    public function truncate()\n+    {\n+        // DB::table('place_likes')->delete();\n+        // DB::table('place_comments')->delete();\n+        // DB::table('place_detail_places')->delete();\n+        // DB::table('place_detail_observations')->delete();\n+        // DB::table('place_details')->delete();\n+\n+    }\n+}\n"
                },
                {
                    "date": 1701285884875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,8 +430,10 @@\n                 $infos->save();\n                 return redirect('/');\n             }\n         } catch (\\Exception $e) {\n+            var_dump($e->getMessage());\n+            die();\n             // Handle any exceptions that may occur during the update\n             return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n         }\n     }\n"
                },
                {
                    "date": 1701285982849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,10 +430,9 @@\n                 $infos->save();\n                 return redirect('/');\n             }\n         } catch (\\Exception $e) {\n-            var_dump($e->getMessage());\n-            die();\n+           \n             // Handle any exceptions that may occur during the update\n             return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n         }\n     }\n@@ -900,902 +899,4 @@\n         // DB::table('place_details')->delete();\n \n     }\n }\n-<?php\n-\n-namespace App\\Http\\Controllers;\n-\n-use Illuminate\\Support\\Facades\\DB;\n-use App\\Models\\Infosperso;\n-use App\\Models\\User;\n-use App\\Models\\Street;\n-use App\\Models\\Building;\n-use App\\Models\\Openspace;\n-use App\\Models\\Opinion;\n-use App\\Models\\Opinion_de;\n-use App\\Models\\Comment_en;\n-use App\\Models\\Comment_de;\n-use App\\Models\\Observation;\n-use App\\Models\\Pages;\n-use App\\Models\\Place;\n-use App\\Models\\PlaceLike;\n-use App\\Models\\PlaceComment;\n-use App\\Models\\Feeling;\n-use App\\Models\\PlaceDetails;\n-use App\\Models\\PlaceDetailPlace;\n-use App\\Models\\PlaceDetailObservation;\n-use App\\Models\\Stat;\n-use App\\Models\\Preference;\n-\n-use Illuminate\\Http\\Request;\n-use Illuminate\\Support\\Facades\\Validator;\n-\n-class GlobalController extends Controller\n-{\n-\n-    public $place_id;\n-    /**\n-     * Handle the incoming request.\n-     *\n-     * @param  \\Illuminate\\Http\\Request  $request\n-     * @return \\Illuminate\\Http\\Response\n-     */\n-\n-\n-    public function getAll($edit_id = '')\n-    {\n-\n-        if (backpack_auth()->check()) {\n-            $userid = backpack_auth()->user()->id;\n-\n-            // check for edit\n-            if ($edit_id) {\n-                $checkplace = PlaceDetails::find($edit_id);\n-                if (!($checkplace && $checkplace->user_id == $userid)) {\n-                    return redirect('/');\n-                }\n-            }\n-\n-\n-            if (Infosperso::where('user_id', $userid)->exists()) {\n-                $infos = Infosperso::where('user_id', $userid)->first();\n-\n-                $allPlaces = Place::where('user_id', null)\n-                    ->where('parent_id', NULL)\n-                    ->orWhere('user_id', backpack_auth()->user()->id)\n-                    ->get();\n-\n-                // dd($allPlaces);\n-\n-                $allObservations = Observation::where('user_id', null)\n-                    ->where('parent_id', NULL)\n-                    ->orWhere('user_id', backpack_auth()->user()->id)\n-                    ->get();\n-\n-\n-\n-                $query = PlaceDetails::whereNotNull('latitude')->whereNotNull('longitude')\n-                    ->with([\n-                        'placeDetail',\n-                        'placeDetail.place',\n-                        'placeDetail.placeChild',\n-                        'observationsDetail',\n-                        'observationsDetail.observation',\n-                        'observationsDetail.observationChild',\n-                        'observationsDetail.feeling',\n-                        'user',\n-                        'placeComment' => function ($query) {\n-                            $query->where('user_id', backpack_auth()->user()->id);\n-                        }\n-                    ]);\n-\n-                if (session()->has('placeIds') && count(session('placeIds')) > 0 && session()->has('observationIds') && count(session('observationIds')) > 0) {\n-\n-                    $query->where(function ($query) {\n-                        $query->whereHas('placeDetail', function ($subQuery) {\n-                            $subQuery->whereIn('place_id', session('placeIds'));\n-                        });\n-                    });\n-                    $query->orWhere(function ($query) {\n-                        $query->whereHas('observationsDetail', function ($subQuery) {\n-                            $subQuery->whereIn('observation_id', session('observationIds'));\n-                        });\n-                    });\n-                } elseif (session()->has('placeIds') && count(session('placeIds')) > 0) {\n-                    $query->where(function ($query) {\n-                        $query->whereHas('placeDetail', function ($subQuery) {\n-                            $subQuery->whereIn('place_id', session('placeIds'));\n-                        });\n-                    });\n-                } elseif (session()->has('observationIds') && count(session('observationIds')) > 0) {\n-                    $query->Where(function ($query) {\n-                        $query->whereHas('observationsDetail', function ($subQuery) {\n-                            $subQuery->whereIn('observation_id', session('observationIds'));\n-                        });\n-                    });\n-                }\n-\n-\n-\n-\n-                // var_dump(session('placeIds'));\n-                // die();\n-\n-\n-                $all_data = $query->get();\n-\n-\n-                $feelings = Feeling::all();\n-\n-                $edited_place = PlaceDetails::with(['observationsDetail.feeling', 'observationsDetail', 'placeDetail'])->find($edit_id);\n-\n-                $likedPlaces = backpack_auth()->user()->likedPlaces->pluck('place_detail_id');\n-\n-                return view(\n-                    'home',\n-                    compact(\n-                        'infos',\n-                        'all_data',\n-                        'userid',\n-                        'allPlaces',\n-                        'allObservations',\n-                        'feelings',\n-                        'likedPlaces',\n-                        'edited_place',\n-                        'edit_id'\n-                    )\n-                );\n-            } else {\n-                $infos = new Infosperso();\n-                $infos->user_id = $userid;\n-                $infos->save();\n-                return view('edit_profile');\n-            }\n-        } else {\n-            return view('index');\n-        }\n-\n-        // dd('good');\n-    }\n-\n-    // public function getAll()\n-    // {\n-    //     return view('index');\n-    // }\n-\n-    public function community_achievements()\n-    {\n-\n-        $usersWithTotals = User::select('*')\n-            ->addSelect(['total_places' => PlaceDetailPlace::selectRaw('COUNT(*)')\n-                ->whereIn('place_detail_id', PlaceDetails::select('id')\n-                    ->whereColumn('user_id', 'users.id'))])\n-            ->addSelect(['total_observations' => PlaceDetailObservation::selectRaw('COUNT(*)')\n-                ->whereIn('place_detail_id', PlaceDetails::select('id')\n-                    ->whereColumn('user_id', 'users.id'))])\n-            ->orderBy('score', 'desc')->paginate(10);\n-\n-        return view('community_acheivements', compact('usersWithTotals'));\n-    }\n-\n-    public function loadMore_community_achievements(Request $request)\n-    {\n-        $page = $request->get('page');\n-\n-        $usersWithTotals = User::select('*')\n-            ->addSelect(['total_places' => PlaceDetailPlace::selectRaw('COUNT(*)')\n-                ->whereIn('place_detail_id', PlaceDetails::select('id')\n-                    ->whereColumn('user_id', 'users.id'))])\n-            ->addSelect(['total_observations' => PlaceDetailObservation::selectRaw('COUNT(*)')\n-                ->whereIn('place_detail_id', PlaceDetails::select('id')\n-                    ->whereColumn('user_id', 'users.id'))])\n-            ->orderBy('score', 'desc')->paginate(10, ['*'], 'page', $page);\n-\n-        $html = view('item_community_acheivements', compact('usersWithTotals'))->render();\n-\n-        return response()->json(['html' => $html, 'hasMorePages' => $usersWithTotals->hasMorePages()]);\n-    }\n-\n-\n-\n-\n-\n-    // public function profil()\n-    // {\n-    //     return view('home');\n-    // }\n-\n-    private function haversine($lat1, $lon1, $lat2, $lon2)\n-    {\n-        $earthRadius = 6371000; // in meters\n-        $dLat = deg2rad($lat2 - $lat1);\n-        $dLon = deg2rad($lon2 - $lon1);\n-        $a = sin($dLat / 2) * sin($dLat / 2) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * sin($dLon / 2) * sin($dLon / 2);\n-        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));\n-        $distance = $earthRadius * $c;\n-\n-        return $distance;\n-    }\n-\n-    public function allbadges()\n-    {\n-        $explorer = 0;\n-        if (backpack_auth()->user()->placeDetails->count() > 0) {\n-            $explorer = 1;\n-        }\n-\n-        $citymaker = 0;\n-        if (backpack_auth()->user()->observations->count() >= 10) {\n-            $citymaker = 1;\n-        }\n-\n-\n-        $architect = 0;\n-        $allplace = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n-            return $placeDetail->placeDetail->pluck('place_id');\n-        });\n-        if ($allplace->count() >= 20) {\n-            $architect = 1;\n-        }\n-\n-        $flaneur = 0;\n-        $allobservation = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n-            return $placeDetail->observationsDetail->map(function ($observation) {\n-                return $observation->only(['place_detail_id', 'observation_id']);\n-            });\n-        })->unique();\n-        if ($allobservation->count() >= 20) {\n-            $flaneur = 1;\n-        }\n-\n-\n-        $urbanist = 0;\n-        $higherCount = max($allplace->count(), $allobservation->count());\n-        if ($higherCount >= 30) {\n-            $urbanist = 1;\n-        }\n-\n-        $influencer = 0;\n-        $alllikes = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n-            return $placeDetail->placeLikes;\n-        });\n-        if ($alllikes->count() >= 10) {\n-            $influencer = 1;\n-        }\n-\n-        $star = 0;\n-        if ($alllikes->count() >= 20) {\n-            $star = 1;\n-        }\n-\n-        $guru = 0;\n-        if (backpack_auth()->user()->likedPlaces->count() >= 10) {\n-            $guru = 1;\n-        }\n-\n-        $investigator = 0;\n-        $totalImagesCount = backpack_auth()->user()->placeDetails->sum(function ($placeDetail) {\n-            $observationImageCount = !empty($placeDetail->obsevation_image) ? 1 : 0;\n-            $placeImageCount = !empty($placeDetail->place_image) ? 1 : 0;\n-            return $observationImageCount + $placeImageCount;\n-        });\n-\n-        if (($totalImagesCount) >= 10) {\n-            $investigator = 1;\n-        }\n-\n-        $supermapper = 0;\n-        if (backpack_auth()->user()->score >= 500) {\n-            $supermapper = 1;\n-        }\n-\n-        return compact(\n-            'explorer',\n-            'citymaker',\n-            'architect',\n-            'flaneur',\n-            'urbanist',\n-            'influencer',\n-            'star',\n-            'guru',\n-            'investigator',\n-            'supermapper',\n-        );\n-    }\n-\n-    public function profile()\n-    {\n-        $userid = backpack_auth()->user()->id;\n-        $name = backpack_auth()->user()->name;\n-        $score = backpack_auth()->user()->score;\n-        $infos = Infosperso::where('user_id', $userid)->first();\n-        $preferences = explode(',', $infos->preferences);\n-        $preferences = preg_replace('/[^A-Za-z0-9 ]/', '', $preferences);\n-\n-        $badgeData = $this->allbadges();\n-        extract($badgeData);\n-\n-\n-\n-        // dd($citymaker);\n-        return view(\n-            'profile',\n-            compact(\n-                'name',\n-                'score',\n-                'preferences',\n-\n-                'citymaker',\n-                'architect',\n-                'explorer',\n-\n-\n-            )\n-        );\n-    }\n-    public function badges_overview()\n-    {\n-        $userid = backpack_auth()->user()->id;\n-        $locale = session()->get('locale');\n-        $name = backpack_auth()->user()->name;\n-        $score = backpack_auth()->user()->score;\n-\n-        $badgeData = $this->allbadges();\n-        extract($badgeData);\n-\n-\n-\n-\n-        // dd($citymaker);\n-        return view(\n-            'badges_overview',\n-            compact(\n-                'name',\n-                'score',\n-                'explorer',\n-                'citymaker',\n-                'architect',\n-                'flaneur',\n-                'urbanist',\n-                'influencer',\n-                'star',\n-                'guru',\n-                'investigator',\n-                'supermapper',\n-\n-            )\n-        );\n-    }\n-\n-    public function saveprofile(Request $request)\n-    {\n-        $userid = backpack_auth()->user()->id;\n-\n-\n-        $request->validate([\n-            'name' => [\n-                'required',\n-                Rule::unique('users')->ignore($userid),\n-            ],\n-            // other validation rules...\n-        ]);\n-\n-        try {\n-            $infos = Infosperso::where('user_id', $userid)->first();\n-            if (backpack_auth()->user()->score > 0) {\n-                backpack_auth()->user()->email = $request->email;\n-                backpack_auth()\n-                    ->user()\n-                    ->save();\n-                Infosperso::where('user_id', $userid)->update([\n-                    'email' => $request->email,\n-                    'age' => $request->age,\n-                    'gender' => $request->gender,\n-                    'profession' => $request->profession,\n-                ]);\n-\n-                return redirect('/');\n-            } else {\n-                backpack_auth()->user()->email = $request->email;\n-                backpack_auth()\n-                    ->user()\n-                    ->save();\n-                $infos = Infosperso::where('user_id', $userid)->first();\n-                $infos->user_id = $userid;\n-                $infos->age = $request->age;\n-                if ($request->age != null) {\n-                    backpack_auth()->user()->score =\n-                        backpack_auth()->user()->score + 1;\n-                    backpack_auth()\n-                        ->user()\n-                        ->save();\n-                }\n-                $infos->gender = $request->gender;\n-                if ($request->gender != null) {\n-                    backpack_auth()->user()->score =\n-                        backpack_auth()->user()->score + 1;\n-                    backpack_auth()\n-                        ->user()\n-                        ->save();\n-                }\n-                $infos->profession = $request->profession;\n-                if ($request->profession != null) {\n-                    backpack_auth()->user()->score =\n-                        backpack_auth()->user()->score + 1;\n-                    backpack_auth()\n-                        ->user()\n-                        ->save();\n-                }\n-                $infos->newuser = 0;\n-                $infos->save();\n-                return redirect('/');\n-            }\n-        } catch (\\Exception $e) {\n-            // Handle any exceptions that may occur during the update\n-            return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n-        }\n-    }\n-\n-    public function savepreferences(Request $request)\n-    {\n-        $userid = backpack_auth()->user()->id;\n-        $infos = Infosperso::where('user_id', $userid)->first();\n-        $infos->preferences = $request->preferences;\n-        $infos->save();\n-\n-        return redirect('/');\n-    }\n-\n-    public function newpreference(Request $request)\n-    {\n-\n-        $userid = backpack_auth()->user()->id;\n-\n-\n-\n-\n-        $tag = strtolower($request->preference);\n-        $preference = Preference::create([\n-            'user_id' => $userid,\n-            'name' => $tag,\n-        ]);\n-        if ($preference) {\n-            $infos = Infosperso::where('user_id', $userid)->first();\n-            $existingPreferences = explode(',', $infos->preferences);\n-            $existingPreferences = preg_replace('/[^A-Za-z0-9 ]/', '', $existingPreferences);\n-            $existingPreferences[] = $tag;\n-            $infos->preferences = $existingPreferences;\n-            $infos->save();\n-        }\n-\n-        return redirect('/preferences');\n-    }\n-\n-    public function preferences()\n-    {\n-        $userid = backpack_auth()->user()->id;\n-        $infos = Infosperso::where('user_id', $userid)->first();\n-\n-        $preferences = explode(',', $infos->preferences);\n-        $preferences = preg_replace('/[^A-Za-z0-9 ]/', '', $preferences);\n-\n-        $preferences_array = Preference::getPreferences($userid);\n-\n-\n-        return view('preferences', compact('preferences', 'preferences_array'));\n-    }\n-\n-\n-\n-    public function avatar(Request $request)\n-    {\n-        $userid = backpack_auth()->user()->id;\n-        //dd($request->all());\n-        $request->validate([\n-            'image' => 'required|image|mimes:jpeg,png,jpg',\n-        ]);\n-\n-        $imageName = time() . '.' . $request->image->extension();\n-\n-        $request->image->storeAs('public/uploads/avatar/', $imageName);\n-\n-        $user = User::find($userid);\n-\n-        backpack_auth()->user()->score = backpack_auth()->user()->score + 1;\n-        backpack_auth()\n-            ->user()\n-            ->save();\n-\n-        $user->avatar = $imageName;\n-        $user->save();\n-\n-        return back();\n-    }\n-\n-    public function placeDetail($id)\n-    {\n-\n-        if ($id) {\n-            $placeSignle = PlaceDetails::find($id);\n-            if (!($placeSignle && $placeSignle->user_id == backpack_auth()->user()->id)) {\n-                return redirect('/');\n-            }\n-\n-\n-            return view('placeDetail', compact('placeSignle'));\n-        }\n-    }\n-    public function dashboard()\n-    {\n-        $userid = backpack_auth()->user()->id;\n-        $placeDetails = User::with('placeDetails')->find($userid)->placeDetails()->orderBy('id', 'desc')->paginate(10);\n-\n-        $score = backpack_auth()->user()->score;\n-\n-\n-        return view('dashboard', compact('placeDetails', 'score'));\n-    }\n-    public function loadMore_dashboard(Request $request)\n-    {\n-        $userid = backpack_auth()->user()->id;\n-        $page = $request->get('page');\n-\n-        $placeDetails = User::with('placeDetails')->find($userid)->placeDetails()->orderBy('id', 'desc')->paginate(10, ['*'], 'page', $page);\n-\n-        $html = view('item_dashboard', compact('placeDetails'))->render();\n-\n-        return response()->json(['html' => $html, 'hasMorePages' => $placeDetails->hasMorePages()]);\n-    }\n-\n-\n-\n-\n-\n-\n-\n-    static function pages()\n-    {\n-        $pages = Pages::all();\n-        return $pages;\n-    }\n-\n-    static function allusers()\n-    {\n-        $users = User::all();\n-        return $users;\n-    }\n-\n-    static function infosperso()\n-    {\n-        $infos = Infosperso::all();\n-        return $infos;\n-    }\n-\n-    static function myprofile()\n-    {\n-        $userid = backpack_auth()->user()->id;\n-        $infos = Infosperso::where('user_id', $userid)->first();\n-        return $infos;\n-    }\n-\n-\n-    //----------------------new code----------------------\n-\n-\n-    function addNewPlaceData($postData)\n-    {\n-\n-        $result_array = [];\n-        if (isset($postData->place_name) && !empty($postData->place_name)) {\n-\n-\n-            $check = Place::where('name', $postData->place_name)->exists();\n-\n-            if ($check) {\n-\n-                return false;\n-            }\n-\n-\n-\n-            $place = Place::create([\n-                'name' => $postData->place_name,\n-                'user_id' => backpack_user()->id,\n-            ]);\n-            $result_array['place_id'] = $place->id;\n-        }\n-        if (isset($postData->observation_name) && !empty($postData->observation_name)) {\n-\n-            $check = Observation::where('name', $postData->observation_name)->exists();\n-\n-            if ($check) {\n-\n-                return false;\n-            }\n-\n-            $observation = Observation::create([\n-                'name' => $postData->observation_name,\n-                'user_id' => backpack_user()->id,\n-            ]);\n-            $result_array['observations'][] = array(\n-                'observation_id' => $observation->id,\n-                'child_observation_id' => NULL,\n-                'feeling_id' => $postData->feeling_id ? $postData->feeling_id : NULL,\n-            );\n-        }\n-\n-        return (object)$result_array;\n-    }\n-\n-    public function addMapPlace(Request $request, $id = null)\n-    {\n-\n-        $postData = json_decode($request->place_data, true);\n-        $postData = (object)$postData;\n-        $returnData = $this->addNewPlaceData($postData);\n-\n-        if ($returnData == false) {\n-            $response['status'] = 'error';\n-            $response['msg'] = 'Place or observation already exist!';\n-            return response()->json($response);\n-        }\n-        $postData = (object)array_merge((array)$postData, (array)$returnData);\n-\n-\n-        //    dd($postData);\n-\n-        $userId = backpack_auth()->user()->id;\n-        $response = ['status' => '', 'msg' => '', 'place_detail_id' => '', 'tab' => '', 'completed' => false];\n-\n-        if (isset($postData->place_detail_id) && $postData->place_detail_id != '') {\n-            $place_detail = PlaceDetails::find($postData->place_detail_id);\n-        } else {\n-            $latitude = $postData->latitude;\n-            $longitude = $postData->longitude;\n-            $radius = 100; // Meters\n-            $place_detail = PlaceDetails::selectRaw(\"*,\n-                    ( 6371 * acos( cos( radians(?) )\n-                    * cos( radians( latitude ) )\n-                    * cos( radians( longitude ) - radians(?)) + sin( radians(?) )\n-                    * sin( radians( latitude ) ) )) AS distance\", [$latitude, $longitude, $latitude])\n-                ->having(\"distance\", \"<\", ($radius / 1000))\n-                ->where('user_id', $userId)\n-                ->first();\n-        }\n-\n-\n-\n-\n-        if (isset($place_detail)) {\n-\n-            $place_detail->update([\n-                'user_id' =>  backpack_auth()->user()->id,\n-                'place_description' =>  $postData->place_description ? $postData->place_description : NULL,\n-                'obsevation_description' =>  $postData->observation_description ? $postData->observation_description : NULL,\n-                // 'latitude' => $postData->latitude,\n-                // 'longitude' => $postData->longitude,\n-            ]);\n-\n-            if (isset($postData->update) && $postData->update == 'place') {\n-                $place_detail->updatePlaces($place_detail, $postData);\n-            } else if (isset($postData->update) && $postData->update == 'observation') {\n-                $place_detail->updateObservations($place_detail, $postData);\n-            } else {\n-\n-                dd('here');\n-                // $place_detail->updateMethod($place_detail,$postData);\n-            }\n-\n-\n-            $response['status'] = 'success';\n-            $response['msg'] = 'data updated successfully!';\n-        } else {\n-            $place_detail = PlaceDetails::create([\n-                'user_id' =>  backpack_auth()->user()->id,\n-                'place_description' =>  $postData->place_description ? $postData->place_description : NULL,\n-                'obsevation_description' =>  $postData->observation_description ? $postData->observation_description : NULL,\n-                'latitude' => $postData->latitude,\n-                'longitude' => $postData->longitude,\n-            ]);\n-\n-            if ($postData->place_id) {\n-                PlaceDetailPlace::create([\n-                    'place_detail_id' => $place_detail->id,\n-                    'place_id' => $postData->place_id,\n-                    'place_child_id' => $postData->child_place_id ? $postData->child_place_id : NULL,\n-                ]);\n-            }\n-\n-            if (isset($postData->observations) && is_array($postData->observations) && count($postData->observations) > 0) {\n-                foreach ($postData->observations as $obsrv) {\n-                    PlaceDetailObservation::create([\n-                        'place_detail_id' => $place_detail->id,\n-                        'observation_id' => $obsrv['observation_id'],\n-                        'observation_child_id' => $obsrv['child_observation_id'] ? $obsrv['child_observation_id'] : NULL,\n-                        'feeling_id' => $obsrv['feeling_id'],\n-                    ]);\n-                }\n-            }\n-\n-\n-\n-            backpack_auth()->user()->incrementScore(1);\n-            $response['status'] = 'success';\n-            $response['msg'] = 'data added successfully!';\n-        }\n-\n-        if ($request->hasFile('place_image')) {\n-            $request->validate([\n-                'place_image' => 'required|image|mimes:jpeg,png,jpg,gif',\n-            ]);\n-            $imageName = time() . '_place.' . $request->place_image->extension();\n-            $request->place_image->storeAs('public/uploads/place/', $imageName);\n-\n-            $place_detail->update([\n-                'place_image' =>  $imageName,\n-            ]);\n-        }\n-\n-        if ($request->hasFile('observation_image')) {\n-            $request->validate([\n-                'observation_image' => 'required|image|mimes:jpeg,png,jpg,gif',\n-            ]);\n-            $imageName = time() . '_observation.' . $request->observation_image->extension();\n-            $request->observation_image->storeAs('public/uploads/observation/', $imageName);\n-            $place_detail->update([\n-                'obsevation_image' =>  $imageName,\n-            ]);\n-        }\n-\n-\n-\n-        $response['place_detail_id'] = $place_detail->id;\n-\n-\n-        if ((isset($place_detail->placeDetail) && $place_detail->placeDetail->id) && (isset($place_detail->observationsDetail) &&  count($place_detail->observationsDetail)) > 0) {\n-            $response['completed'] = true;\n-        }\n-\n-        $response['tab'] = $postData->tab;\n-\n-        $response['place_id'] = $place_detail->placeDetail->place_id ?? null;\n-\n-        return response()->json($response);\n-    }\n-\n-\n-    public function addNewPlace(Request $request)\n-    {\n-\n-\n-\n-        if ($request->place_name) {\n-            $place = Place::create([\n-                'name' => $request->place_name,\n-                'user_id' => backpack_user()->id,\n-            ]);\n-        }\n-\n-        if ($request->observation_name) {\n-            $observation = Observation::create([\n-                'name' => $request->observation_name,\n-                'user_id' => backpack_user()->id,\n-            ]);\n-        }\n-\n-\n-        PlaceDetails::create([\n-            'place_id' => $place->id ?? NULL,\n-            'observation_id' => $observation->id ?? NULL,\n-            'user_id' =>  backpack_auth()->user()->id,\n-            'latitude' => $request->latitude,\n-            'longitude' => $request->longitude,\n-\n-        ]);\n-\n-        if ($request->observation_name) {\n-            return response()->json([\n-                'status' => 'success',\n-                'msg' => 'Observation added successfully, You can also add place for this place!',\n-\n-            ]);\n-        } else {\n-            return response()->json([\n-                'status' => 'success',\n-                'msg' => 'Place added successfully, You also add obervation for this place!',\n-\n-            ]);\n-        }\n-    }\n-\n-\n-    public function createNew($type = 'place', $edit_id = null)\n-    {\n-        $only=false;\n-        if(request()->only){\n-            $only=true;\n-        }\n-\n-        if ($edit_id) {\n-            $checkplace = PlaceDetails::find($edit_id);\n-            if (!($checkplace && $checkplace->user_id == backpack_auth()->user()->id)) {\n-                return redirect('/');\n-            }\n-        }\n-\n-        $allPlaces = Place::where('user_id', null)\n-            ->where('parent_id', NULL)\n-            ->orWhere('user_id', backpack_auth()->user()->id)\n-            ->get();\n-\n-\n-\n-        $allObservations = Observation::where('user_id', null)\n-            ->where('parent_id', NULL)\n-            ->orWhere('user_id', backpack_auth()->user()->id)\n-            ->get();\n-\n-        $feelings = Feeling::all();\n-\n-        return view('add-new-place', compact('allObservations', 'allPlaces', 'type', 'feelings', 'edit_id','only'));\n-    }\n-\n-\n-\n-    public function filter()\n-    {\n-\n-        return view('filter');\n-    }\n-\n-\n-    public function saveDes(Request $request)\n-    {\n-\n-        PlaceDetails::where('id', $request->id)\n-            ->update([\n-\n-                'description' => $request->data\n-\n-            ]);\n-    }\n-    public function saveComment(Request $request)\n-    {\n-        PlaceComment::updateOrcreate(\n-            [\n-                'place_detail_id' => $request->id,\n-                'user_id' => backpack_auth()->user()->id,\n-            ],\n-            [\n-                'comment' => $request->data,\n-            ]\n-        );\n-    }\n-\n-    public function setLike(Request $request)\n-    {\n-\n-        $placeLike = PlaceLike::where('place_detail_id', $request->id)\n-            ->where('user_id', backpack_auth()->user()->id)\n-            ->first();\n-\n-        if ($placeLike) {\n-            $placeLike->delete();\n-        } else {\n-            PlaceLike::create([\n-                'place_detail_id' => $request->id,\n-                'user_id' => backpack_auth()->user()->id,\n-            ]);\n-        }\n-    }\n-\n-    public function truncate()\n-    {\n-        // DB::table('place_likes')->delete();\n-        // DB::table('place_comments')->delete();\n-        // DB::table('place_detail_places')->delete();\n-        // DB::table('place_detail_observations')->delete();\n-        // DB::table('place_details')->delete();\n-\n-    }\n-}\n"
                },
                {
                    "date": 1701286000662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,11 +430,9 @@\n                 $infos->save();\n                 return redirect('/');\n             }\n         } catch (\\Exception $e) {\n-           \n-            // Handle any exceptions that may occur during the update\n-            return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n+                       return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n         }\n     }\n \n     public function savepreferences(Request $request)\n"
                },
                {
                    "date": 1701286015312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,9 +430,9 @@\n                 $infos->save();\n                 return redirect('/');\n             }\n         } catch (\\Exception $e) {\n-            return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n+            // return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n         }\n     }\n \n     public function savepreferences(Request $request)\n"
                },
                {
                    "date": 1701286022624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,900 @@\n+<?php\n+\n+namespace App\\Http\\Controllers;\n+\n+use Illuminate\\Support\\Facades\\DB;\n+use App\\Models\\Infosperso;\n+use App\\Models\\User;\n+use App\\Models\\Street;\n+use App\\Models\\Building;\n+use App\\Models\\Openspace;\n+use App\\Models\\Opinion;\n+use App\\Models\\Opinion_de;\n+use App\\Models\\Comment_en;\n+use App\\Models\\Comment_de;\n+use App\\Models\\Observation;\n+use App\\Models\\Pages;\n+use App\\Models\\Place;\n+use App\\Models\\PlaceLike;\n+use App\\Models\\PlaceComment;\n+use App\\Models\\Feeling;\n+use App\\Models\\PlaceDetails;\n+use App\\Models\\PlaceDetailPlace;\n+use App\\Models\\PlaceDetailObservation;\n+use App\\Models\\Stat;\n+use App\\Models\\Preference;\n+\n+use Illuminate\\Http\\Request;\n+use Illuminate\\Support\\Facades\\Validator;\n+\n+use Illuminate\\Validation\\Rule;\n+\n+\n+class GlobalController extends Controller\n+{\n+\n+    public $place_id;\n+    /**\n+     * Handle the incoming request.\n+     *\n+     * @param  \\Illuminate\\Http\\Request  $request\n+     * @return \\Illuminate\\Http\\Response\n+     */\n+\n+\n+    public function getAll($edit_id = '')\n+    {\n+\n+        if (backpack_auth()->check()) {\n+            $userid = backpack_auth()->user()->id;\n+\n+            // check for edit\n+            if ($edit_id) {\n+                $checkplace = PlaceDetails::find($edit_id);\n+                if (!($checkplace && $checkplace->user_id == $userid)) {\n+                    return redirect('/');\n+                }\n+            }\n+\n+\n+            if (Infosperso::where('user_id', $userid)->exists()) {\n+                $infos = Infosperso::where('user_id', $userid)->first();\n+\n+                $allPlaces = Place::where('user_id', null)\n+                    ->where('parent_id', NULL)\n+                    ->orWhere('user_id', backpack_auth()->user()->id)\n+                    ->get();\n+\n+                // dd($allPlaces);\n+\n+                $allObservations = Observation::where('user_id', null)\n+                    ->where('parent_id', NULL)\n+                    ->orWhere('user_id', backpack_auth()->user()->id)\n+                    ->get();\n+\n+\n+\n+                $query = PlaceDetails::whereNotNull('latitude')->whereNotNull('longitude')\n+                    ->with([\n+                        'placeDetail',\n+                        'placeDetail.place',\n+                        'placeDetail.placeChild',\n+                        'observationsDetail',\n+                        'observationsDetail.observation',\n+                        'observationsDetail.observationChild',\n+                        'observationsDetail.feeling',\n+                        'user',\n+                        'placeComment' => function ($query) {\n+                            $query->where('user_id', backpack_auth()->user()->id);\n+                        }\n+                    ]);\n+\n+                if (session()->has('placeIds') && count(session('placeIds')) > 0 && session()->has('observationIds') && count(session('observationIds')) > 0) {\n+\n+                    $query->where(function ($query) {\n+                        $query->whereHas('placeDetail', function ($subQuery) {\n+                            $subQuery->whereIn('place_id', session('placeIds'));\n+                        });\n+                    });\n+                    $query->orWhere(function ($query) {\n+                        $query->whereHas('observationsDetail', function ($subQuery) {\n+                            $subQuery->whereIn('observation_id', session('observationIds'));\n+                        });\n+                    });\n+                } elseif (session()->has('placeIds') && count(session('placeIds')) > 0) {\n+                    $query->where(function ($query) {\n+                        $query->whereHas('placeDetail', function ($subQuery) {\n+                            $subQuery->whereIn('place_id', session('placeIds'));\n+                        });\n+                    });\n+                } elseif (session()->has('observationIds') && count(session('observationIds')) > 0) {\n+                    $query->Where(function ($query) {\n+                        $query->whereHas('observationsDetail', function ($subQuery) {\n+                            $subQuery->whereIn('observation_id', session('observationIds'));\n+                        });\n+                    });\n+                }\n+\n+\n+\n+\n+                // var_dump(session('placeIds'));\n+                // die();\n+\n+\n+                $all_data = $query->get();\n+\n+\n+                $feelings = Feeling::all();\n+\n+                $edited_place = PlaceDetails::with(['observationsDetail.feeling', 'observationsDetail', 'placeDetail'])->find($edit_id);\n+\n+                $likedPlaces = backpack_auth()->user()->likedPlaces->pluck('place_detail_id');\n+\n+                return view(\n+                    'home',\n+                    compact(\n+                        'infos',\n+                        'all_data',\n+                        'userid',\n+                        'allPlaces',\n+                        'allObservations',\n+                        'feelings',\n+                        'likedPlaces',\n+                        'edited_place',\n+                        'edit_id'\n+                    )\n+                );\n+            } else {\n+                $infos = new Infosperso();\n+                $infos->user_id = $userid;\n+                $infos->save();\n+                return view('edit_profile');\n+            }\n+        } else {\n+            return view('index');\n+        }\n+\n+        // dd('good');\n+    }\n+\n+    // public function getAll()\n+    // {\n+    //     return view('index');\n+    // }\n+\n+    public function community_achievements()\n+    {\n+\n+        $usersWithTotals = User::select('*')\n+            ->addSelect(['total_places' => PlaceDetailPlace::selectRaw('COUNT(*)')\n+                ->whereIn('place_detail_id', PlaceDetails::select('id')\n+                    ->whereColumn('user_id', 'users.id'))])\n+            ->addSelect(['total_observations' => PlaceDetailObservation::selectRaw('COUNT(*)')\n+                ->whereIn('place_detail_id', PlaceDetails::select('id')\n+                    ->whereColumn('user_id', 'users.id'))])\n+            ->orderBy('score', 'desc')->paginate(10);\n+\n+        return view('community_acheivements', compact('usersWithTotals'));\n+    }\n+\n+    public function loadMore_community_achievements(Request $request)\n+    {\n+        $page = $request->get('page');\n+\n+        $usersWithTotals = User::select('*')\n+            ->addSelect(['total_places' => PlaceDetailPlace::selectRaw('COUNT(*)')\n+                ->whereIn('place_detail_id', PlaceDetails::select('id')\n+                    ->whereColumn('user_id', 'users.id'))])\n+            ->addSelect(['total_observations' => PlaceDetailObservation::selectRaw('COUNT(*)')\n+                ->whereIn('place_detail_id', PlaceDetails::select('id')\n+                    ->whereColumn('user_id', 'users.id'))])\n+            ->orderBy('score', 'desc')->paginate(10, ['*'], 'page', $page);\n+\n+        $html = view('item_community_acheivements', compact('usersWithTotals'))->render();\n+\n+        return response()->json(['html' => $html, 'hasMorePages' => $usersWithTotals->hasMorePages()]);\n+    }\n+\n+\n+\n+\n+\n+    // public function profil()\n+    // {\n+    //     return view('home');\n+    // }\n+\n+    private function haversine($lat1, $lon1, $lat2, $lon2)\n+    {\n+        $earthRadius = 6371000; // in meters\n+        $dLat = deg2rad($lat2 - $lat1);\n+        $dLon = deg2rad($lon2 - $lon1);\n+        $a = sin($dLat / 2) * sin($dLat / 2) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * sin($dLon / 2) * sin($dLon / 2);\n+        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));\n+        $distance = $earthRadius * $c;\n+\n+        return $distance;\n+    }\n+\n+    public function allbadges()\n+    {\n+        $explorer = 0;\n+        if (backpack_auth()->user()->placeDetails->count() > 0) {\n+            $explorer = 1;\n+        }\n+\n+        $citymaker = 0;\n+        if (backpack_auth()->user()->observations->count() >= 10) {\n+            $citymaker = 1;\n+        }\n+\n+\n+        $architect = 0;\n+        $allplace = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n+            return $placeDetail->placeDetail->pluck('place_id');\n+        });\n+        if ($allplace->count() >= 20) {\n+            $architect = 1;\n+        }\n+\n+        $flaneur = 0;\n+        $allobservation = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n+            return $placeDetail->observationsDetail->map(function ($observation) {\n+                return $observation->only(['place_detail_id', 'observation_id']);\n+            });\n+        })->unique();\n+        if ($allobservation->count() >= 20) {\n+            $flaneur = 1;\n+        }\n+\n+\n+        $urbanist = 0;\n+        $higherCount = max($allplace->count(), $allobservation->count());\n+        if ($higherCount >= 30) {\n+            $urbanist = 1;\n+        }\n+\n+        $influencer = 0;\n+        $alllikes = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n+            return $placeDetail->placeLikes;\n+        });\n+        if ($alllikes->count() >= 10) {\n+            $influencer = 1;\n+        }\n+\n+        $star = 0;\n+        if ($alllikes->count() >= 20) {\n+            $star = 1;\n+        }\n+\n+        $guru = 0;\n+        if (backpack_auth()->user()->likedPlaces->count() >= 10) {\n+            $guru = 1;\n+        }\n+\n+        $investigator = 0;\n+        $totalImagesCount = backpack_auth()->user()->placeDetails->sum(function ($placeDetail) {\n+            $observationImageCount = !empty($placeDetail->obsevation_image) ? 1 : 0;\n+            $placeImageCount = !empty($placeDetail->place_image) ? 1 : 0;\n+            return $observationImageCount + $placeImageCount;\n+        });\n+\n+        if (($totalImagesCount) >= 10) {\n+            $investigator = 1;\n+        }\n+\n+        $supermapper = 0;\n+        if (backpack_auth()->user()->score >= 500) {\n+            $supermapper = 1;\n+        }\n+\n+        return compact(\n+            'explorer',\n+            'citymaker',\n+            'architect',\n+            'flaneur',\n+            'urbanist',\n+            'influencer',\n+            'star',\n+            'guru',\n+            'investigator',\n+            'supermapper',\n+        );\n+    }\n+\n+    public function profile()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $name = backpack_auth()->user()->name;\n+        $score = backpack_auth()->user()->score;\n+        $infos = Infosperso::where('user_id', $userid)->first();\n+        $preferences = explode(',', $infos->preferences);\n+        $preferences = preg_replace('/[^A-Za-z0-9 ]/', '', $preferences);\n+\n+        $badgeData = $this->allbadges();\n+        extract($badgeData);\n+\n+\n+\n+        // dd($citymaker);\n+        return view(\n+            'profile',\n+            compact(\n+                'name',\n+                'score',\n+                'preferences',\n+\n+                'citymaker',\n+                'architect',\n+                'explorer',\n+\n+\n+            )\n+        );\n+    }\n+    public function badges_overview()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $locale = session()->get('locale');\n+        $name = backpack_auth()->user()->name;\n+        $score = backpack_auth()->user()->score;\n+\n+        $badgeData = $this->allbadges();\n+        extract($badgeData);\n+\n+\n+\n+\n+        // dd($citymaker);\n+        return view(\n+            'badges_overview',\n+            compact(\n+                'name',\n+                'score',\n+                'explorer',\n+                'citymaker',\n+                'architect',\n+                'flaneur',\n+                'urbanist',\n+                'influencer',\n+                'star',\n+                'guru',\n+                'investigator',\n+                'supermapper',\n+\n+            )\n+        );\n+    }\n+\n+    public function saveprofile(Request $request)\n+    {\n+        $userid = backpack_auth()->user()->id;\n+\n+\n+        $request->validate([\n+            'name' => [\n+                'required',\n+                Rule::unique('users')->ignore($userid),\n+            ],\n+            // other validation rules...\n+        ]);\n+\n+        try {\n+            $infos = Infosperso::where('user_id', $userid)->first();\n+            if (backpack_auth()->user()->score > 0) {\n+                backpack_auth()->user()->email = $request->email;\n+                backpack_auth()\n+                    ->user()\n+                    ->save();\n+                Infosperso::where('user_id', $userid)->update([\n+                    'email' => $request->email,\n+                    'age' => $request->age,\n+                    'gender' => $request->gender,\n+                    'profession' => $request->profession,\n+                ]);\n+\n+                return redirect('/');\n+            } else {\n+                backpack_auth()->user()->email = $request->email;\n+                backpack_auth()\n+                    ->user()\n+                    ->save();\n+                $infos = Infosperso::where('user_id', $userid)->first();\n+                $infos->user_id = $userid;\n+                $infos->age = $request->age;\n+                if ($request->age != null) {\n+                    backpack_auth()->user()->score =\n+                        backpack_auth()->user()->score + 1;\n+                    backpack_auth()\n+                        ->user()\n+                        ->save();\n+                }\n+                $infos->gender = $request->gender;\n+                if ($request->gender != null) {\n+                    backpack_auth()->user()->score =\n+                        backpack_auth()->user()->score + 1;\n+                    backpack_auth()\n+                        ->user()\n+                        ->save();\n+                }\n+                $infos->profession = $request->profession;\n+                if ($request->profession != null) {\n+                    backpack_auth()->user()->score =\n+                        backpack_auth()->user()->score + 1;\n+                    backpack_auth()\n+                        ->user()\n+                        ->save();\n+                }\n+                $infos->newuser = 0;\n+                $infos->save();\n+                return redirect('/');\n+            }\n+        } catch (\\Exception $e) {\n+            return redirect()->back()->with('error', 'Error updating record: ' . $e->getMessage());\n+        }\n+    }\n+\n+    public function savepreferences(Request $request)\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $infos = Infosperso::where('user_id', $userid)->first();\n+        $infos->preferences = $request->preferences;\n+        $infos->save();\n+\n+        return redirect('/');\n+    }\n+\n+    public function newpreference(Request $request)\n+    {\n+\n+        $userid = backpack_auth()->user()->id;\n+\n+\n+\n+\n+        $tag = strtolower($request->preference);\n+        $preference = Preference::create([\n+            'user_id' => $userid,\n+            'name' => $tag,\n+        ]);\n+        if ($preference) {\n+            $infos = Infosperso::where('user_id', $userid)->first();\n+            $existingPreferences = explode(',', $infos->preferences);\n+            $existingPreferences = preg_replace('/[^A-Za-z0-9 ]/', '', $existingPreferences);\n+            $existingPreferences[] = $tag;\n+            $infos->preferences = $existingPreferences;\n+            $infos->save();\n+        }\n+\n+        return redirect('/preferences');\n+    }\n+\n+    public function preferences()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $infos = Infosperso::where('user_id', $userid)->first();\n+\n+        $preferences = explode(',', $infos->preferences);\n+        $preferences = preg_replace('/[^A-Za-z0-9 ]/', '', $preferences);\n+\n+        $preferences_array = Preference::getPreferences($userid);\n+\n+\n+        return view('preferences', compact('preferences', 'preferences_array'));\n+    }\n+\n+\n+\n+    public function avatar(Request $request)\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        //dd($request->all());\n+        $request->validate([\n+            'image' => 'required|image|mimes:jpeg,png,jpg',\n+        ]);\n+\n+        $imageName = time() . '.' . $request->image->extension();\n+\n+        $request->image->storeAs('public/uploads/avatar/', $imageName);\n+\n+        $user = User::find($userid);\n+\n+        backpack_auth()->user()->score = backpack_auth()->user()->score + 1;\n+        backpack_auth()\n+            ->user()\n+            ->save();\n+\n+        $user->avatar = $imageName;\n+        $user->save();\n+\n+        return back();\n+    }\n+\n+    public function placeDetail($id)\n+    {\n+\n+        if ($id) {\n+            $placeSignle = PlaceDetails::find($id);\n+            if (!($placeSignle && $placeSignle->user_id == backpack_auth()->user()->id)) {\n+                return redirect('/');\n+            }\n+\n+\n+            return view('placeDetail', compact('placeSignle'));\n+        }\n+    }\n+    public function dashboard()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $placeDetails = User::with('placeDetails')->find($userid)->placeDetails()->orderBy('id', 'desc')->paginate(10);\n+\n+        $score = backpack_auth()->user()->score;\n+\n+\n+        return view('dashboard', compact('placeDetails', 'score'));\n+    }\n+    public function loadMore_dashboard(Request $request)\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $page = $request->get('page');\n+\n+        $placeDetails = User::with('placeDetails')->find($userid)->placeDetails()->orderBy('id', 'desc')->paginate(10, ['*'], 'page', $page);\n+\n+        $html = view('item_dashboard', compact('placeDetails'))->render();\n+\n+        return response()->json(['html' => $html, 'hasMorePages' => $placeDetails->hasMorePages()]);\n+    }\n+\n+\n+\n+\n+\n+\n+\n+    static function pages()\n+    {\n+        $pages = Pages::all();\n+        return $pages;\n+    }\n+\n+    static function allusers()\n+    {\n+        $users = User::all();\n+        return $users;\n+    }\n+\n+    static function infosperso()\n+    {\n+        $infos = Infosperso::all();\n+        return $infos;\n+    }\n+\n+    static function myprofile()\n+    {\n+        $userid = backpack_auth()->user()->id;\n+        $infos = Infosperso::where('user_id', $userid)->first();\n+        return $infos;\n+    }\n+\n+\n+    //----------------------new code----------------------\n+\n+\n+    function addNewPlaceData($postData)\n+    {\n+\n+        $result_array = [];\n+        if (isset($postData->place_name) && !empty($postData->place_name)) {\n+\n+\n+            $check = Place::where('name', $postData->place_name)->exists();\n+\n+            if ($check) {\n+\n+                return false;\n+            }\n+\n+\n+\n+            $place = Place::create([\n+                'name' => $postData->place_name,\n+                'user_id' => backpack_user()->id,\n+            ]);\n+            $result_array['place_id'] = $place->id;\n+        }\n+        if (isset($postData->observation_name) && !empty($postData->observation_name)) {\n+\n+            $check = Observation::where('name', $postData->observation_name)->exists();\n+\n+            if ($check) {\n+\n+                return false;\n+            }\n+\n+            $observation = Observation::create([\n+                'name' => $postData->observation_name,\n+                'user_id' => backpack_user()->id,\n+            ]);\n+            $result_array['observations'][] = array(\n+                'observation_id' => $observation->id,\n+                'child_observation_id' => NULL,\n+                'feeling_id' => $postData->feeling_id ? $postData->feeling_id : NULL,\n+            );\n+        }\n+\n+        return (object)$result_array;\n+    }\n+\n+    public function addMapPlace(Request $request, $id = null)\n+    {\n+\n+        $postData = json_decode($request->place_data, true);\n+        $postData = (object)$postData;\n+        $returnData = $this->addNewPlaceData($postData);\n+\n+        if ($returnData == false) {\n+            $response['status'] = 'error';\n+            $response['msg'] = 'Place or observation already exist!';\n+            return response()->json($response);\n+        }\n+        $postData = (object)array_merge((array)$postData, (array)$returnData);\n+\n+\n+        //    dd($postData);\n+\n+        $userId = backpack_auth()->user()->id;\n+        $response = ['status' => '', 'msg' => '', 'place_detail_id' => '', 'tab' => '', 'completed' => false];\n+\n+        if (isset($postData->place_detail_id) && $postData->place_detail_id != '') {\n+            $place_detail = PlaceDetails::find($postData->place_detail_id);\n+        } else {\n+            $latitude = $postData->latitude;\n+            $longitude = $postData->longitude;\n+            $radius = 100; // Meters\n+            $place_detail = PlaceDetails::selectRaw(\"*,\n+                    ( 6371 * acos( cos( radians(?) )\n+                    * cos( radians( latitude ) )\n+                    * cos( radians( longitude ) - radians(?)) + sin( radians(?) )\n+                    * sin( radians( latitude ) ) )) AS distance\", [$latitude, $longitude, $latitude])\n+                ->having(\"distance\", \"<\", ($radius / 1000))\n+                ->where('user_id', $userId)\n+                ->first();\n+        }\n+\n+\n+\n+\n+        if (isset($place_detail)) {\n+\n+            $place_detail->update([\n+                'user_id' =>  backpack_auth()->user()->id,\n+                'place_description' =>  $postData->place_description ? $postData->place_description : NULL,\n+                'obsevation_description' =>  $postData->observation_description ? $postData->observation_description : NULL,\n+                // 'latitude' => $postData->latitude,\n+                // 'longitude' => $postData->longitude,\n+            ]);\n+\n+            if (isset($postData->update) && $postData->update == 'place') {\n+                $place_detail->updatePlaces($place_detail, $postData);\n+            } else if (isset($postData->update) && $postData->update == 'observation') {\n+                $place_detail->updateObservations($place_detail, $postData);\n+            } else {\n+\n+                dd('here');\n+                // $place_detail->updateMethod($place_detail,$postData);\n+            }\n+\n+\n+            $response['status'] = 'success';\n+            $response['msg'] = 'data updated successfully!';\n+        } else {\n+            $place_detail = PlaceDetails::create([\n+                'user_id' =>  backpack_auth()->user()->id,\n+                'place_description' =>  $postData->place_description ? $postData->place_description : NULL,\n+                'obsevation_description' =>  $postData->observation_description ? $postData->observation_description : NULL,\n+                'latitude' => $postData->latitude,\n+                'longitude' => $postData->longitude,\n+            ]);\n+\n+            if ($postData->place_id) {\n+                PlaceDetailPlace::create([\n+                    'place_detail_id' => $place_detail->id,\n+                    'place_id' => $postData->place_id,\n+                    'place_child_id' => $postData->child_place_id ? $postData->child_place_id : NULL,\n+                ]);\n+            }\n+\n+            if (isset($postData->observations) && is_array($postData->observations) && count($postData->observations) > 0) {\n+                foreach ($postData->observations as $obsrv) {\n+                    PlaceDetailObservation::create([\n+                        'place_detail_id' => $place_detail->id,\n+                        'observation_id' => $obsrv['observation_id'],\n+                        'observation_child_id' => $obsrv['child_observation_id'] ? $obsrv['child_observation_id'] : NULL,\n+                        'feeling_id' => $obsrv['feeling_id'],\n+                    ]);\n+                }\n+            }\n+\n+\n+\n+            backpack_auth()->user()->incrementScore(1);\n+            $response['status'] = 'success';\n+            $response['msg'] = 'data added successfully!';\n+        }\n+\n+        if ($request->hasFile('place_image')) {\n+            $request->validate([\n+                'place_image' => 'required|image|mimes:jpeg,png,jpg,gif',\n+            ]);\n+            $imageName = time() . '_place.' . $request->place_image->extension();\n+            $request->place_image->storeAs('public/uploads/place/', $imageName);\n+\n+            $place_detail->update([\n+                'place_image' =>  $imageName,\n+            ]);\n+        }\n+\n+        if ($request->hasFile('observation_image')) {\n+            $request->validate([\n+                'observation_image' => 'required|image|mimes:jpeg,png,jpg,gif',\n+            ]);\n+            $imageName = time() . '_observation.' . $request->observation_image->extension();\n+            $request->observation_image->storeAs('public/uploads/observation/', $imageName);\n+            $place_detail->update([\n+                'obsevation_image' =>  $imageName,\n+            ]);\n+        }\n+\n+\n+\n+        $response['place_detail_id'] = $place_detail->id;\n+\n+\n+        if ((isset($place_detail->placeDetail) && $place_detail->placeDetail->id) && (isset($place_detail->observationsDetail) &&  count($place_detail->observationsDetail)) > 0) {\n+            $response['completed'] = true;\n+        }\n+\n+        $response['tab'] = $postData->tab;\n+\n+        $response['place_id'] = $place_detail->placeDetail->place_id ?? null;\n+\n+        return response()->json($response);\n+    }\n+\n+\n+    public function addNewPlace(Request $request)\n+    {\n+\n+\n+\n+        if ($request->place_name) {\n+            $place = Place::create([\n+                'name' => $request->place_name,\n+                'user_id' => backpack_user()->id,\n+            ]);\n+        }\n+\n+        if ($request->observation_name) {\n+            $observation = Observation::create([\n+                'name' => $request->observation_name,\n+                'user_id' => backpack_user()->id,\n+            ]);\n+        }\n+\n+\n+        PlaceDetails::create([\n+            'place_id' => $place->id ?? NULL,\n+            'observation_id' => $observation->id ?? NULL,\n+            'user_id' =>  backpack_auth()->user()->id,\n+            'latitude' => $request->latitude,\n+            'longitude' => $request->longitude,\n+\n+        ]);\n+\n+        if ($request->observation_name) {\n+            return response()->json([\n+                'status' => 'success',\n+                'msg' => 'Observation added successfully, You can also add place for this place!',\n+\n+            ]);\n+        } else {\n+            return response()->json([\n+                'status' => 'success',\n+                'msg' => 'Place added successfully, You also add obervation for this place!',\n+\n+            ]);\n+        }\n+    }\n+\n+\n+    public function createNew($type = 'place', $edit_id = null)\n+    {\n+        $only=false;\n+        if(request()->only){\n+            $only=true;\n+        }\n+\n+        if ($edit_id) {\n+            $checkplace = PlaceDetails::find($edit_id);\n+            if (!($checkplace && $checkplace->user_id == backpack_auth()->user()->id)) {\n+                return redirect('/');\n+            }\n+        }\n+\n+        $allPlaces = Place::where('user_id', null)\n+            ->where('parent_id', NULL)\n+            ->orWhere('user_id', backpack_auth()->user()->id)\n+            ->get();\n+\n+\n+\n+        $allObservations = Observation::where('user_id', null)\n+            ->where('parent_id', NULL)\n+            ->orWhere('user_id', backpack_auth()->user()->id)\n+            ->get();\n+\n+        $feelings = Feeling::all();\n+\n+        return view('add-new-place', compact('allObservations', 'allPlaces', 'type', 'feelings', 'edit_id','only'));\n+    }\n+\n+\n+\n+    public function filter()\n+    {\n+\n+        return view('filter');\n+    }\n+\n+\n+    public function saveDes(Request $request)\n+    {\n+\n+        PlaceDetails::where('id', $request->id)\n+            ->update([\n+\n+                'description' => $request->data\n+\n+            ]);\n+    }\n+    public function saveComment(Request $request)\n+    {\n+        PlaceComment::updateOrcreate(\n+            [\n+                'place_detail_id' => $request->id,\n+                'user_id' => backpack_auth()->user()->id,\n+            ],\n+            [\n+                'comment' => $request->data,\n+            ]\n+        );\n+    }\n+\n+    public function setLike(Request $request)\n+    {\n+\n+        $placeLike = PlaceLike::where('place_detail_id', $request->id)\n+            ->where('user_id', backpack_auth()->user()->id)\n+            ->first();\n+\n+        if ($placeLike) {\n+            $placeLike->delete();\n+        } else {\n+            PlaceLike::create([\n+                'place_detail_id' => $request->id,\n+                'user_id' => backpack_auth()->user()->id,\n+            ]);\n+        }\n+    }\n+\n+    public function truncate()\n+    {\n+        // DB::table('place_likes')->delete();\n+        // DB::table('place_comments')->delete();\n+        // DB::table('place_detail_places')->delete();\n+        // DB::table('place_detail_observations')->delete();\n+        // DB::table('place_details')->delete();\n+\n+    }\n+}\n"
                }
            ],
            "date": 1701284594528,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Models\\Infosperso;\nuse App\\Models\\User;\nuse App\\Models\\Street;\nuse App\\Models\\Building;\nuse App\\Models\\Openspace;\nuse App\\Models\\Opinion;\nuse App\\Models\\Opinion_de;\nuse App\\Models\\Comment_en;\nuse App\\Models\\Comment_de;\nuse App\\Models\\Observation;\nuse App\\Models\\Pages;\nuse App\\Models\\Place;\nuse App\\Models\\PlaceLike;\nuse App\\Models\\PlaceComment;\nuse App\\Models\\Feeling;\nuse App\\Models\\PlaceDetails;\nuse App\\Models\\PlaceDetailPlace;\nuse App\\Models\\PlaceDetailObservation;\nuse App\\Models\\Stat;\nuse App\\Models\\Preference;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass GlobalController extends Controller\n{\n\n    public $place_id;\n    /**\n     * Handle the incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n\n\n    public function getAll($edit_id = '')\n    {\n\n        if (backpack_auth()->check()) {\n            $userid = backpack_auth()->user()->id;\n\n            // check for edit\n            if ($edit_id) {\n                $checkplace = PlaceDetails::find($edit_id);\n                if (!($checkplace && $checkplace->user_id == $userid)) {\n                    return redirect('/');\n                }\n            }\n\n\n            if (Infosperso::where('user_id', $userid)->exists()) {\n                $infos = Infosperso::where('user_id', $userid)->first();\n\n                $allPlaces = Place::where('user_id', null)\n                    ->where('parent_id', NULL)\n                    ->orWhere('user_id', backpack_auth()->user()->id)\n                    ->get();\n\n                // dd($allPlaces);\n\n                $allObservations = Observation::where('user_id', null)\n                    ->where('parent_id', NULL)\n                    ->orWhere('user_id', backpack_auth()->user()->id)\n                    ->get();\n\n\n\n                $query = PlaceDetails::whereNotNull('latitude')->whereNotNull('longitude')\n                    ->with([\n                        'placeDetail',\n                        'placeDetail.place',\n                        'placeDetail.placeChild',\n                        'observationsDetail',\n                        'observationsDetail.observation',\n                        'observationsDetail.observationChild',\n                        'observationsDetail.feeling',\n                        'user',\n                        'placeComment' => function ($query) {\n                            $query->where('user_id', backpack_auth()->user()->id);\n                        }\n                    ]);\n\n                if (session()->has('placeIds') && count(session('placeIds')) > 0 && session()->has('observationIds') && count(session('observationIds')) > 0) {\n\n                    $query->where(function ($query) {\n                        $query->whereHas('placeDetail', function ($subQuery) {\n                            $subQuery->whereIn('place_id', session('placeIds'));\n                        });\n                    });\n                    $query->orWhere(function ($query) {\n                        $query->whereHas('observationsDetail', function ($subQuery) {\n                            $subQuery->whereIn('observation_id', session('observationIds'));\n                        });\n                    });\n                } elseif (session()->has('placeIds') && count(session('placeIds')) > 0) {\n                    $query->where(function ($query) {\n                        $query->whereHas('placeDetail', function ($subQuery) {\n                            $subQuery->whereIn('place_id', session('placeIds'));\n                        });\n                    });\n                } elseif (session()->has('observationIds') && count(session('observationIds')) > 0) {\n                    $query->Where(function ($query) {\n                        $query->whereHas('observationsDetail', function ($subQuery) {\n                            $subQuery->whereIn('observation_id', session('observationIds'));\n                        });\n                    });\n                }\n\n\n\n\n                // var_dump(session('placeIds'));\n                // die();\n\n\n                $all_data = $query->get();\n\n\n                $feelings = Feeling::all();\n\n                $edited_place = PlaceDetails::with(['observationsDetail.feeling', 'observationsDetail', 'placeDetail'])->find($edit_id);\n\n                $likedPlaces = backpack_auth()->user()->likedPlaces->pluck('place_detail_id');\n\n                return view(\n                    'home',\n                    compact(\n                        'infos',\n                        'all_data',\n                        'userid',\n                        'allPlaces',\n                        'allObservations',\n                        'feelings',\n                        'likedPlaces',\n                        'edited_place',\n                        'edit_id'\n                    )\n                );\n            } else {\n                $infos = new Infosperso();\n                $infos->user_id = $userid;\n                $infos->save();\n                return view('edit_profile');\n            }\n        } else {\n            return view('index');\n        }\n\n        // dd('good');\n    }\n\n    // public function getAll()\n    // {\n    //     return view('index');\n    // }\n\n    public function community_achievements()\n    {\n\n        $usersWithTotals = User::select('*')\n            ->addSelect(['total_places' => PlaceDetailPlace::selectRaw('COUNT(*)')\n                ->whereIn('place_detail_id', PlaceDetails::select('id')\n                    ->whereColumn('user_id', 'users.id'))])\n            ->addSelect(['total_observations' => PlaceDetailObservation::selectRaw('COUNT(*)')\n                ->whereIn('place_detail_id', PlaceDetails::select('id')\n                    ->whereColumn('user_id', 'users.id'))])\n            ->orderBy('score', 'desc')->paginate(10);\n\n        return view('community_acheivements', compact('usersWithTotals'));\n    }\n\n    public function loadMore_community_achievements(Request $request)\n    {\n        $page = $request->get('page');\n\n        $usersWithTotals = User::select('*')\n            ->addSelect(['total_places' => PlaceDetailPlace::selectRaw('COUNT(*)')\n                ->whereIn('place_detail_id', PlaceDetails::select('id')\n                    ->whereColumn('user_id', 'users.id'))])\n            ->addSelect(['total_observations' => PlaceDetailObservation::selectRaw('COUNT(*)')\n                ->whereIn('place_detail_id', PlaceDetails::select('id')\n                    ->whereColumn('user_id', 'users.id'))])\n            ->orderBy('score', 'desc')->paginate(10, ['*'], 'page', $page);\n\n        $html = view('item_community_acheivements', compact('usersWithTotals'))->render();\n\n        return response()->json(['html' => $html, 'hasMorePages' => $usersWithTotals->hasMorePages()]);\n    }\n\n\n\n\n\n    // public function profil()\n    // {\n    //     return view('home');\n    // }\n\n    private function haversine($lat1, $lon1, $lat2, $lon2)\n    {\n        $earthRadius = 6371000; // in meters\n        $dLat = deg2rad($lat2 - $lat1);\n        $dLon = deg2rad($lon2 - $lon1);\n        $a = sin($dLat / 2) * sin($dLat / 2) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * sin($dLon / 2) * sin($dLon / 2);\n        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));\n        $distance = $earthRadius * $c;\n\n        return $distance;\n    }\n\n    public function allbadges()\n    {\n        $explorer = 0;\n        if (backpack_auth()->user()->placeDetails->count() > 0) {\n            $explorer = 1;\n        }\n\n        $citymaker = 0;\n        if (backpack_auth()->user()->observations->count() >= 10) {\n            $citymaker = 1;\n        }\n\n\n        $architect = 0;\n        $allplace = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n            return $placeDetail->placeDetail->pluck('place_id');\n        });\n        if ($allplace->count() >= 20) {\n            $architect = 1;\n        }\n\n        $flaneur = 0;\n        $allobservation = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n            return $placeDetail->observationsDetail->map(function ($observation) {\n                return $observation->only(['place_detail_id', 'observation_id']);\n            });\n        })->unique();\n        if ($allobservation->count() >= 20) {\n            $flaneur = 1;\n        }\n\n\n        $urbanist = 0;\n        $higherCount = max($allplace->count(), $allobservation->count());\n        if ($higherCount >= 30) {\n            $urbanist = 1;\n        }\n\n        $influencer = 0;\n        $alllikes = backpack_auth()->user()->placeDetails->flatMap(function ($placeDetail) {\n            return $placeDetail->placeLikes;\n        });\n        if ($alllikes->count() >= 10) {\n            $influencer = 1;\n        }\n\n        $star = 0;\n        if ($alllikes->count() >= 20) {\n            $star = 1;\n        }\n\n        $guru = 0;\n        if (backpack_auth()->user()->likedPlaces->count() >= 10) {\n            $guru = 1;\n        }\n\n        $investigator = 0;\n        $totalImagesCount = backpack_auth()->user()->placeDetails->sum(function ($placeDetail) {\n            $observationImageCount = !empty($placeDetail->obsevation_image) ? 1 : 0;\n            $placeImageCount = !empty($placeDetail->place_image) ? 1 : 0;\n            return $observationImageCount + $placeImageCount;\n        });\n\n        if (($totalImagesCount) >= 10) {\n            $investigator = 1;\n        }\n\n        $supermapper = 0;\n        if (backpack_auth()->user()->score >= 500) {\n            $supermapper = 1;\n        }\n\n        return compact(\n            'explorer',\n            'citymaker',\n            'architect',\n            'flaneur',\n            'urbanist',\n            'influencer',\n            'star',\n            'guru',\n            'investigator',\n            'supermapper',\n        );\n    }\n\n    public function profile()\n    {\n        $userid = backpack_auth()->user()->id;\n        $name = backpack_auth()->user()->name;\n        $score = backpack_auth()->user()->score;\n        $infos = Infosperso::where('user_id', $userid)->first();\n        $preferences = explode(',', $infos->preferences);\n        $preferences = preg_replace('/[^A-Za-z0-9 ]/', '', $preferences);\n\n        $badgeData = $this->allbadges();\n        extract($badgeData);\n\n\n\n        // dd($citymaker);\n        return view(\n            'profile',\n            compact(\n                'name',\n                'score',\n                'preferences',\n\n                'citymaker',\n                'architect',\n                'explorer',\n\n\n            )\n        );\n    }\n    public function badges_overview()\n    {\n        $userid = backpack_auth()->user()->id;\n        $locale = session()->get('locale');\n        $name = backpack_auth()->user()->name;\n        $score = backpack_auth()->user()->score;\n\n        $badgeData = $this->allbadges();\n        extract($badgeData);\n\n\n\n\n        // dd($citymaker);\n        return view(\n            'badges_overview',\n            compact(\n                'name',\n                'score',\n                'explorer',\n                'citymaker',\n                'architect',\n                'flaneur',\n                'urbanist',\n                'influencer',\n                'star',\n                'guru',\n                'investigator',\n                'supermapper',\n\n            )\n        );\n    }\n\n    public function saveprofile(Request $request)\n    {\n        $userid = backpack_auth()->user()->id;\n        $infos = Infosperso::where('user_id', $userid)->first();\n        if (backpack_auth()->user()->score > 0) {\n            backpack_auth()->user()->email = $request->email;\n            backpack_auth()\n                ->user()\n                ->save();\n            Infosperso::where('user_id', $userid)->update([\n                'email' => $request->email,\n                'age' => $request->age,\n                'gender' => $request->gender,\n                'profession' => $request->profession,\n            ]);\n\n            return redirect('preferences');\n        } else {\n            backpack_auth()->user()->email = $request->email;\n            backpack_auth()\n                ->user()\n                ->save();\n            $infos = Infosperso::where('user_id', $userid)->first();\n            $infos->user_id = $userid;\n            $infos->age = $request->age;\n            if ($request->age != null) {\n                backpack_auth()->user()->score =\n                    backpack_auth()->user()->score + 1;\n                backpack_auth()\n                    ->user()\n                    ->save();\n            }\n            $infos->gender = $request->gender;\n            if ($request->gender != null) {\n                backpack_auth()->user()->score =\n                    backpack_auth()->user()->score + 1;\n                backpack_auth()\n                    ->user()\n                    ->save();\n            }\n            $infos->profession = $request->profession;\n            if ($request->profession != null) {\n                backpack_auth()->user()->score =\n                    backpack_auth()->user()->score + 1;\n                backpack_auth()\n                    ->user()\n                    ->save();\n            }\n            $infos->newuser = 0;\n            $infos->save();\n            return redirect('preferences');\n        }\n    }\n\n    public function savepreferences(Request $request)\n    {\n        $userid = backpack_auth()->user()->id;\n        $infos = Infosperso::where('user_id', $userid)->first();\n        $infos->preferences = $request->preferences;\n        $infos->save();\n\n        return redirect('/');\n    }\n\n    public function newpreference(Request $request)\n    {\n\n        $userid = backpack_auth()->user()->id;\n\n\n\n\n        $tag = strtolower($request->preference);\n        $preference = Preference::create([\n            'user_id' => $userid,\n            'name' => $tag,\n        ]);\n        if ($preference) {\n            $infos = Infosperso::where('user_id', $userid)->first();\n            $existingPreferences = explode(',', $infos->preferences);\n            $existingPreferences = preg_replace('/[^A-Za-z0-9 ]/', '', $existingPreferences);\n            $existingPreferences[] = $tag;\n            $infos->preferences = $existingPreferences;\n            $infos->save();\n        }\n\n        return redirect('/preferences');\n    }\n\n    public function preferences()\n    {\n        $userid = backpack_auth()->user()->id;\n        $infos = Infosperso::where('user_id', $userid)->first();\n\n        $preferences = explode(',', $infos->preferences);\n        $preferences = preg_replace('/[^A-Za-z0-9 ]/', '', $preferences);\n\n        $preferences_array = Preference::getPreferences($userid);\n\n\n        return view('preferences', compact('preferences', 'preferences_array'));\n    }\n\n\n\n    public function avatar(Request $request)\n    {\n        $userid = backpack_auth()->user()->id;\n        //dd($request->all());\n        $request->validate([\n            'image' => 'required|image|mimes:jpeg,png,jpg',\n        ]);\n\n        $imageName = time() . '.' . $request->image->extension();\n\n        $request->image->storeAs('public/uploads/avatar/', $imageName);\n\n        $user = User::find($userid);\n\n        backpack_auth()->user()->score = backpack_auth()->user()->score + 1;\n        backpack_auth()\n            ->user()\n            ->save();\n\n        $user->avatar = $imageName;\n        $user->save();\n\n        return back();\n    }\n\n    public function placeDetail($id)\n    {\n\n        if ($id) {\n            $placeSignle = PlaceDetails::find($id);\n            if (!($placeSignle && $placeSignle->user_id == backpack_auth()->user()->id)) {\n                return redirect('/');\n            }\n\n\n            return view('placeDetail', compact('placeSignle'));\n        }\n    }\n    public function dashboard()\n    {\n        $userid = backpack_auth()->user()->id;\n        $placeDetails = User::with('placeDetails')->find($userid)->placeDetails()->orderBy('id', 'desc')->paginate(10);\n\n        $score = backpack_auth()->user()->score;\n\n\n        return view('dashboard', compact('placeDetails', 'score'));\n    }\n    public function loadMore_dashboard(Request $request)\n    {\n        $userid = backpack_auth()->user()->id;\n        $page = $request->get('page');\n\n        $placeDetails = User::with('placeDetails')->find($userid)->placeDetails()->orderBy('id', 'desc')->paginate(10, ['*'], 'page', $page);\n\n        $html = view('item_dashboard', compact('placeDetails'))->render();\n\n        return response()->json(['html' => $html, 'hasMorePages' => $placeDetails->hasMorePages()]);\n    }\n\n\n\n\n\n\n\n    static function pages()\n    {\n        $pages = Pages::all();\n        return $pages;\n    }\n\n    static function allusers()\n    {\n        $users = User::all();\n        return $users;\n    }\n\n    static function infosperso()\n    {\n        $infos = Infosperso::all();\n        return $infos;\n    }\n\n    static function myprofile()\n    {\n        $userid = backpack_auth()->user()->id;\n        $infos = Infosperso::where('user_id', $userid)->first();\n        return $infos;\n    }\n\n\n    //----------------------new code----------------------\n\n\n    function addNewPlaceData($postData)\n    {\n\n        $result_array = [];\n        if (isset($postData->place_name) && !empty($postData->place_name)) {\n\n\n            $check = Place::where('name', $postData->place_name)->exists();\n\n            if ($check) {\n\n                return false;\n            }\n\n\n\n            $place = Place::create([\n                'name' => $postData->place_name,\n                'user_id' => backpack_user()->id,\n            ]);\n            $result_array['place_id'] = $place->id;\n        }\n        if (isset($postData->observation_name) && !empty($postData->observation_name)) {\n\n            $check = Observation::where('name', $postData->observation_name)->exists();\n\n            if ($check) {\n\n                return false;\n            }\n\n            $observation = Observation::create([\n                'name' => $postData->observation_name,\n                'user_id' => backpack_user()->id,\n            ]);\n            $result_array['observations'][] = array(\n                'observation_id' => $observation->id,\n                'child_observation_id' => NULL,\n                'feeling_id' => $postData->feeling_id ? $postData->feeling_id : NULL,\n            );\n        }\n\n        return (object)$result_array;\n    }\n\n    public function addMapPlace(Request $request, $id = null)\n    {\n\n        $postData = json_decode($request->place_data, true);\n        $postData = (object)$postData;\n        $returnData = $this->addNewPlaceData($postData);\n\n        if ($returnData == false) {\n            $response['status'] = 'error';\n            $response['msg'] = 'Place or observation already exist!';\n            return response()->json($response);\n        }\n        $postData = (object)array_merge((array)$postData, (array)$returnData);\n\n\n        //    dd($postData);\n\n        $userId = backpack_auth()->user()->id;\n        $response = ['status' => '', 'msg' => '', 'place_detail_id' => '', 'tab' => '', 'completed' => false];\n\n        if (isset($postData->place_detail_id) && $postData->place_detail_id != '') {\n            $place_detail = PlaceDetails::find($postData->place_detail_id);\n        } else {\n            $latitude = $postData->latitude;\n            $longitude = $postData->longitude;\n            $radius = 100; // Meters\n            $place_detail = PlaceDetails::selectRaw(\"*,\n                    ( 6371 * acos( cos( radians(?) )\n                    * cos( radians( latitude ) )\n                    * cos( radians( longitude ) - radians(?)) + sin( radians(?) )\n                    * sin( radians( latitude ) ) )) AS distance\", [$latitude, $longitude, $latitude])\n                ->having(\"distance\", \"<\", ($radius / 1000))\n                ->where('user_id', $userId)\n                ->first();\n        }\n\n\n\n\n        if (isset($place_detail)) {\n\n            $place_detail->update([\n                'user_id' =>  backpack_auth()->user()->id,\n                'place_description' =>  $postData->place_description ? $postData->place_description : NULL,\n                'obsevation_description' =>  $postData->observation_description ? $postData->observation_description : NULL,\n                // 'latitude' => $postData->latitude,\n                // 'longitude' => $postData->longitude,\n            ]);\n\n            if (isset($postData->update) && $postData->update == 'place') {\n                $place_detail->updatePlaces($place_detail, $postData);\n            } else if (isset($postData->update) && $postData->update == 'observation') {\n                $place_detail->updateObservations($place_detail, $postData);\n            } else {\n\n                dd('here');\n                // $place_detail->updateMethod($place_detail,$postData);\n            }\n\n\n            $response['status'] = 'success';\n            $response['msg'] = 'data updated successfully!';\n        } else {\n            $place_detail = PlaceDetails::create([\n                'user_id' =>  backpack_auth()->user()->id,\n                'place_description' =>  $postData->place_description ? $postData->place_description : NULL,\n                'obsevation_description' =>  $postData->observation_description ? $postData->observation_description : NULL,\n                'latitude' => $postData->latitude,\n                'longitude' => $postData->longitude,\n            ]);\n\n            if ($postData->place_id) {\n                PlaceDetailPlace::create([\n                    'place_detail_id' => $place_detail->id,\n                    'place_id' => $postData->place_id,\n                    'place_child_id' => $postData->child_place_id ? $postData->child_place_id : NULL,\n                ]);\n            }\n\n            if (isset($postData->observations) && is_array($postData->observations) && count($postData->observations) > 0) {\n                foreach ($postData->observations as $obsrv) {\n                    PlaceDetailObservation::create([\n                        'place_detail_id' => $place_detail->id,\n                        'observation_id' => $obsrv['observation_id'],\n                        'observation_child_id' => $obsrv['child_observation_id'] ? $obsrv['child_observation_id'] : NULL,\n                        'feeling_id' => $obsrv['feeling_id'],\n                    ]);\n                }\n            }\n\n\n\n            backpack_auth()->user()->incrementScore(1);\n            $response['status'] = 'success';\n            $response['msg'] = 'data added successfully!';\n        }\n\n        if ($request->hasFile('place_image')) {\n            $request->validate([\n                'place_image' => 'required|image|mimes:jpeg,png,jpg,gif',\n            ]);\n            $imageName = time() . '_place.' . $request->place_image->extension();\n            $request->place_image->storeAs('public/uploads/place/', $imageName);\n\n            $place_detail->update([\n                'place_image' =>  $imageName,\n            ]);\n        }\n\n        if ($request->hasFile('observation_image')) {\n            $request->validate([\n                'observation_image' => 'required|image|mimes:jpeg,png,jpg,gif',\n            ]);\n            $imageName = time() . '_observation.' . $request->observation_image->extension();\n            $request->observation_image->storeAs('public/uploads/observation/', $imageName);\n            $place_detail->update([\n                'obsevation_image' =>  $imageName,\n            ]);\n        }\n\n\n\n        $response['place_detail_id'] = $place_detail->id;\n\n\n        if ((isset($place_detail->placeDetail) && $place_detail->placeDetail->id) && (isset($place_detail->observationsDetail) &&  count($place_detail->observationsDetail)) > 0) {\n            $response['completed'] = true;\n        }\n\n        $response['tab'] = $postData->tab;\n\n        $response['place_id'] = $place_detail->placeDetail->place_id ?? null;\n\n        return response()->json($response);\n    }\n\n\n    public function addNewPlace(Request $request)\n    {\n\n\n\n        if ($request->place_name) {\n            $place = Place::create([\n                'name' => $request->place_name,\n                'user_id' => backpack_user()->id,\n            ]);\n        }\n\n        if ($request->observation_name) {\n            $observation = Observation::create([\n                'name' => $request->observation_name,\n                'user_id' => backpack_user()->id,\n            ]);\n        }\n\n\n        PlaceDetails::create([\n            'place_id' => $place->id ?? NULL,\n            'observation_id' => $observation->id ?? NULL,\n            'user_id' =>  backpack_auth()->user()->id,\n            'latitude' => $request->latitude,\n            'longitude' => $request->longitude,\n\n        ]);\n\n        if ($request->observation_name) {\n            return response()->json([\n                'status' => 'success',\n                'msg' => 'Observation added successfully, You can also add place for this place!',\n\n            ]);\n        } else {\n            return response()->json([\n                'status' => 'success',\n                'msg' => 'Place added successfully, You also add obervation for this place!',\n\n            ]);\n        }\n    }\n\n\n    public function createNew($type = 'place', $edit_id = null)\n    {\n        $only=false;\n        if(request()->only){\n            $only=true;\n        }\n\n        die();\n\n        if ($edit_id) {\n            $checkplace = PlaceDetails::find($edit_id);\n            if (!($checkplace && $checkplace->user_id == backpack_auth()->user()->id)) {\n                return redirect('/');\n            }\n        }\n\n        $allPlaces = Place::where('user_id', null)\n            ->where('parent_id', NULL)\n            ->orWhere('user_id', backpack_auth()->user()->id)\n            ->get();\n\n\n\n        $allObservations = Observation::where('user_id', null)\n            ->where('parent_id', NULL)\n            ->orWhere('user_id', backpack_auth()->user()->id)\n            ->get();\n\n        $feelings = Feeling::all();\n\n        return view('add-new-place', compact('allObservations', 'allPlaces', 'type', 'feelings', 'edit_id'));\n    }\n\n\n\n    public function filter()\n    {\n\n        return view('filter');\n    }\n\n\n    public function saveDes(Request $request)\n    {\n\n        PlaceDetails::where('id', $request->id)\n            ->update([\n\n                'description' => $request->data\n\n            ]);\n    }\n    public function saveComment(Request $request)\n    {\n        PlaceComment::updateOrcreate(\n            [\n                'place_detail_id' => $request->id,\n                'user_id' => backpack_auth()->user()->id,\n            ],\n            [\n                'comment' => $request->data,\n            ]\n        );\n    }\n\n    public function setLike(Request $request)\n    {\n\n        $placeLike = PlaceLike::where('place_detail_id', $request->id)\n            ->where('user_id', backpack_auth()->user()->id)\n            ->first();\n\n        if ($placeLike) {\n            $placeLike->delete();\n        } else {\n            PlaceLike::create([\n                'place_detail_id' => $request->id,\n                'user_id' => backpack_auth()->user()->id,\n            ]);\n        }\n    }\n\n    public function truncate()\n    {\n        // DB::table('place_likes')->delete();\n        // DB::table('place_comments')->delete();\n        // DB::table('place_detail_places')->delete();\n        // DB::table('place_detail_observations')->delete();\n        // DB::table('place_details')->delete();\n\n    }\n}\n"
        }
    ]
}